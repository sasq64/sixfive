AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

5309 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T S
                        ;
                        ; Copyright (C) 2012  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on proper setting of the processor status
                        ; register bits.
                        ;
                        ; version 30-jul-2012
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 from http://www.kingswood-consulting.co.uk/assemblers/
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 1000 hex and
                        ; enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        
                        
                        ; C O N F I G U R A T I O N
                        ;
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0001 =                  I_flag = 1
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $55 (85) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a
                        ;data_segment memory start address, $5A (90) consecutive Bytes required
0200 =                  data_segment = $200
                        ;code_segment memory start address, 12kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
                        ;parts of the code are self modifying and must reside in RAM
1000 =                  code_segment = $1000
                        
                        
                                if I_flag = 0
                        load_flag   macro       ;force enable interrupts
                                    lda #\1&$fb ;mask I-flag
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro       ;force disable interrupts
                                    lda #\1|4
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro       ;never change I-flag
                                    lda #\1
                                    ora flag_I_on
                                    and flag_I_off
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro       ;allow test to change I-flag
                                    lda #\1
                                    endm
                                endif
                        
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst,x
                                    plp
                                    endm
                        
                                if I_flag = 0
                        cmp_flag    macro       ;I_flag is always enabled
                                    cmp #(\1|$30)&$fb
                                    endm
                        eor_flag    macro       ;invert expected on flags, mask I
                                    eor #(\1&$fb|$30)
                                    endm
                                endif
                                if I_flag = 1
                        cmp_flag    macro       ;I_flag is always disabled
                                    cmp #(\1|$34)&$ff
                                    endm
                        eor_flag    macro       ;invert expected on flags
                                    eor #(\1|$34)
                                    endm
                                endif
                                if I_flag = 2
                        cmp_flag    macro       ;I_flag is never changed
                                    eor flag_I_on
                                    cmp #(\1|$30)&$fb
                                    endm
                        eor_flag    macro       ;invert expected on flags
                                    eor flag_I_on
                                    eor #(\1&$fb|$30)
                                    endm
                                endif
                                if I_flag = 3
                        cmp_flag    macro       ;I_flag is always enabled
                                    cmp #(\1|$30)&$ff
                                    endm
                        eor_flag    macro       ;invert expected on flags
                                    eor #(\1|$30)
                                    endm
                                endif
                        
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    php         ;use stack to retrieve status
                                    pla
                                    cmp_flag \1
                                    bne *       ;trap
                                    plp         ;restore status
                                    endm
                        
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    php
                                    cmp #\1     ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    cmp_flag \2
                                    bne *       ;trap
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    php
                                    cpx #\1     ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    cmp_flag \2
                                    bne *       ;trap
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    php
                                    cpy #\1     ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    cmp_flag \2
                                    bne *       ;trap
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    bne *       ;trap
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    bne *       ;trap
                                    endm
                        
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    bne *       ;trap
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    bne *       ;trap
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    bne *       ;trap
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    bne *       ;trap
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    bne *       ;trap
                                    endm
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0000 =                  		org 0
0000 : 00               		db 0
000a =                          org zero_page
000a :                  zp_bss
000a : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000e : 7f               zp7f    db  $7f             ;test pattern for compare
000f : 0000000000       zpt     ds  5               ;store/modify test area
                        ;logical zeropage operands
0014 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0018 : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
001c : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0020 : 0002             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0022 : 0102                     dw  abs1+1
0024 : 0202                     dw  abs1+2
0026 : 0302                     dw  abs1+3
0028 : 0402                     dw  abs7f
002a : 0801             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
002c : 3302             indt    dw  abst            ;indirect pointer to store area in absolute memory
002e : 3402                     dw  abst+1
0030 : 3502                     dw  abst+2
0032 : 3602                     dw  abst+3
0034 : 3b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0036 : 3c02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0038 : 3d02                     dw  absAN+1
003a : 3e02                     dw  absAN+2
003c : 3f02                     dw  absAN+3
003e : 4002             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0040 : 4102                     dw  absEO+1
0042 : 4202                     dw  absEO+2
0044 : 4302                     dw  absEO+3
0046 : 3802             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0048 : 3902                     dw  absOR+1
004a : 3a02                     dw  absOR+2
004c : 3b02                     dw  absOR+3
                        ;add/subtract operand generation and result/flag prediction
004e : 5802             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0050 : 5902             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0052 : 5901             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0054 : 5a01             sbiy2   dw  sba2-$ff
0056 :                  zp_bss_end
0056 : 00               adfc    ds  1               ;carry flag before op
0057 : 00               ad1     ds  1               ;operand 1 - accumulator
0058 : 00               ad2     ds  1               ;operand 2 - memory / immediate
0059 : 00               adrl    ds  1               ;expected result bits 0-7
005a : 00               adrh    ds  1               ;expected result bit 8 (carry)
005b : 00               adrf    ds  1               ;expected flags NV0000ZC (not valid in decimal mode)
005c : 00               sb2     ds  1               ;operand 2 complemented for subtract
                        ;break test interrupt save
005d : 00               irq_a   ds  1               ;a register
005e : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
                        
0200 =                          org data_segment
0200 :                  data_bss
0200 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0204 : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
0205 : 80800002         fLDx    db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
0209 :                  rASL                        ;expected result ASL & ROL -carry
0209 : 86048200         rROL    db  $86,$04,$82,0   ; "
020d : 87058301         rROLc   db  $87,$05,$83,1   ;expected result ROL +carry
0211 :                  rLSR                        ;expected result LSR & ROR -carry
0211 : 61412000         rROR    db  $61,$41,$20,0   ; "
0215 : e1c1a080         rRORc   db  $e1,$c1,$a0,$80 ;expected result ROR +carry
0219 :                  fASL                        ;expected flags for shifts
0219 : 81018002         fROL    db  fnc,fc,fn,fz    ;no carry in
021d : 81018000         fROLc   db  fnc,fc,fn,0     ;carry in
0221 :                  fLSR
0221 : 01000102         fROR    db  fc,0,fc,fz      ;no carry in
0225 : 81808180         fRORc   db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
0229 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
022e : 0080800200       fINC    db  0,fn,fn,fz,0    ;expected flags for INC/DEC
0233 : 0000000000       abst    ds  5               ;store/modify test area
                        ;logical memory operand
0238 : 001f7180         absOR   db  0,$1f,$71,$80   ;test pattern for OR
023c : 0fff7f80         absAN   db  $0f,$ff,$7f,$80 ;test pattern for AND
0240 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
0244 : 00f11f00         absORa  db  0,$f1,$1f,0     ;test pattern for OR
0248 : f0ffffff         absANa  db  $f0,$ff,$ff,$ff ;test pattern for AND
024c : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
0250 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0254 : 02800080         absflo  db  fz,fn,0,fn
0258 :                  data_bss_end
                        ;add/subtract operand copy
0258 : 00               ada2    ds  1               ;operand 2
0259 : 00               sba2    ds  1               ;operand 2 complemented for subtract
                        
                                code
1000 =                          org code_segment
1000 : d8                       cld
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
1001 : 78                       sei
                            endif
                        
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                        
                        ;testing relative addressing with BEQ
                        ;uses untested JMP DEX DEY LDA#0 LDY#$FE TYA TAX STA BPL CLC ADC#2 cmp#0
1002 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
1004 :                  range_loop
1004 : 88                       dey             ;next relative address
1005 : 98                       tya
1006 : aa                       tax             ;precharge count to end of loop
1007 : 1003                     bpl range_fw    ;calculate relative address
1009 : 18                       clc             ;avoid branch self or to relative address of branch
100a : 6902                     adc #2
100c :                  range_fw
100c : 497f                     eor #$7f        ;complement except sign
100e : 8d9510                   sta range_adr   ;load into test target
1011 : a900                     lda #0          ;should set zero flag in status register
1013 : 4c9410                   jmp range_op
                        
                                ;relative address target field with branch under test in the middle
1016 : ca                       dex             ;-128 - max backward
1017 : ca                       dex
1018 : ca                       dex
1019 : ca                       dex
101a : ca                       dex
101b : ca                       dex
101c : ca                       dex
101d : ca                       dex
101e : ca                       dex             ;-120
101f : ca                       dex
1020 : ca                       dex
1021 : ca                       dex
1022 : ca                       dex
1023 : ca                       dex
1024 : ca                       dex
1025 : ca                       dex
1026 : ca                       dex
1027 : ca                       dex
1028 : ca                       dex             ;-110
1029 : ca                       dex
102a : ca                       dex
102b : ca                       dex
102c : ca                       dex
102d : ca                       dex
102e : ca                       dex
102f : ca                       dex
1030 : ca                       dex
1031 : ca                       dex
1032 : ca                       dex             ;-100
1033 : ca                       dex
1034 : ca                       dex
1035 : ca                       dex
1036 : ca                       dex
1037 : ca                       dex
1038 : ca                       dex
1039 : ca                       dex
103a : ca                       dex
103b : ca                       dex
103c : ca                       dex             ;-90
103d : ca                       dex
103e : ca                       dex
103f : ca                       dex
1040 : ca                       dex
1041 : ca                       dex
1042 : ca                       dex
1043 : ca                       dex
1044 : ca                       dex
1045 : ca                       dex
1046 : ca                       dex             ;-80
1047 : ca                       dex
1048 : ca                       dex
1049 : ca                       dex
104a : ca                       dex
104b : ca                       dex
104c : ca                       dex
104d : ca                       dex
104e : ca                       dex
104f : ca                       dex
1050 : ca                       dex             ;-70
1051 : ca                       dex
1052 : ca                       dex
1053 : ca                       dex
1054 : ca                       dex
1055 : ca                       dex
1056 : ca                       dex
1057 : ca                       dex
1058 : ca                       dex
1059 : ca                       dex
105a : ca                       dex             ;-60
105b : ca                       dex
105c : ca                       dex
105d : ca                       dex
105e : ca                       dex
105f : ca                       dex
1060 : ca                       dex
1061 : ca                       dex
1062 : ca                       dex
1063 : ca                       dex
1064 : ca                       dex             ;-50
1065 : ca                       dex
1066 : ca                       dex
1067 : ca                       dex
1068 : ca                       dex
1069 : ca                       dex
106a : ca                       dex
106b : ca                       dex
106c : ca                       dex
106d : ca                       dex
106e : ca                       dex             ;-40
106f : ca                       dex
1070 : ca                       dex
1071 : ca                       dex
1072 : ca                       dex
1073 : ca                       dex
1074 : ca                       dex
1075 : ca                       dex
1076 : ca                       dex
1077 : ca                       dex
1078 : ca                       dex             ;-30
1079 : ca                       dex
107a : ca                       dex
107b : ca                       dex
107c : ca                       dex
107d : ca                       dex
107e : ca                       dex
107f : ca                       dex
1080 : ca                       dex
1081 : ca                       dex
1082 : ca                       dex             ;-20
1083 : ca                       dex
1084 : ca                       dex
1085 : ca                       dex
1086 : ca                       dex
1087 : ca                       dex
1088 : ca                       dex
1089 : ca                       dex
108a : ca                       dex
108b : ca                       dex
108c : ca                       dex             ;-10
108d : ca                       dex
108e : ca                       dex
108f : ca                       dex
1090 : ca                       dex
1091 : ca                       dex
1092 : ca                       dex
1093 : ca                       dex             ;-3
1094 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
1095 =                  range_adr   = *+1       ;modifiable relative address
1094 : f0fe                     beq *           ;trap, if called without modification
1096 : ca                       dex             ;+0
1097 : ca                       dex
1098 : ca                       dex
1099 : ca                       dex
109a : ca                       dex
109b : ca                       dex
109c : ca                       dex
109d : ca                       dex
109e : ca                       dex
109f : ca                       dex
10a0 : ca                       dex             ;+10
10a1 : ca                       dex
10a2 : ca                       dex
10a3 : ca                       dex
10a4 : ca                       dex
10a5 : ca                       dex
10a6 : ca                       dex
10a7 : ca                       dex
10a8 : ca                       dex
10a9 : ca                       dex
10aa : ca                       dex             ;+20
10ab : ca                       dex
10ac : ca                       dex
10ad : ca                       dex
10ae : ca                       dex
10af : ca                       dex
10b0 : ca                       dex
10b1 : ca                       dex
10b2 : ca                       dex
10b3 : ca                       dex
10b4 : ca                       dex             ;+30
10b5 : ca                       dex
10b6 : ca                       dex
10b7 : ca                       dex
10b8 : ca                       dex
10b9 : ca                       dex
10ba : ca                       dex
10bb : ca                       dex
10bc : ca                       dex
10bd : ca                       dex
10be : ca                       dex             ;+40
10bf : ca                       dex
10c0 : ca                       dex
10c1 : ca                       dex
10c2 : ca                       dex
10c3 : ca                       dex
10c4 : ca                       dex
10c5 : ca                       dex
10c6 : ca                       dex
10c7 : ca                       dex
10c8 : ca                       dex             ;+50
10c9 : ca                       dex
10ca : ca                       dex
10cb : ca                       dex
10cc : ca                       dex
10cd : ca                       dex
10ce : ca                       dex
10cf : ca                       dex
10d0 : ca                       dex
10d1 : ca                       dex
10d2 : ca                       dex             ;+60
10d3 : ca                       dex
10d4 : ca                       dex
10d5 : ca                       dex
10d6 : ca                       dex
10d7 : ca                       dex
10d8 : ca                       dex
10d9 : ca                       dex
10da : ca                       dex
10db : ca                       dex
10dc : ca                       dex             ;+70
10dd : ca                       dex
10de : ca                       dex
10df : ca                       dex
10e0 : ca                       dex
10e1 : ca                       dex
10e2 : ca                       dex
10e3 : ca                       dex
10e4 : ca                       dex
10e5 : ca                       dex
10e6 : ca                       dex             ;+80
10e7 : ca                       dex
10e8 : ca                       dex
10e9 : ca                       dex
10ea : ca                       dex
10eb : ca                       dex
10ec : ca                       dex
10ed : ca                       dex
10ee : ca                       dex
10ef : ca                       dex
10f0 : ca                       dex             ;+90
10f1 : ca                       dex
10f2 : ca                       dex
10f3 : ca                       dex
10f4 : ca                       dex
10f5 : ca                       dex
10f6 : ca                       dex
10f7 : ca                       dex
10f8 : ca                       dex
10f9 : ca                       dex
10fa : ca                       dex             ;+100
10fb : ca                       dex
10fc : ca                       dex
10fd : ca                       dex
10fe : ca                       dex
10ff : ca                       dex
1100 : ca                       dex
1101 : ca                       dex
1102 : ca                       dex
1103 : ca                       dex
1104 : ca                       dex             ;+110
1105 : ca                       dex
1106 : ca                       dex
1107 : ca                       dex
1108 : ca                       dex
1109 : ca                       dex
110a : ca                       dex
110b : ca                       dex
110c : ca                       dex
110d : ca                       dex
110e : ca                       dex             ;+120
110f : ca                       dex
1110 : ca                       dex
1111 : ca                       dex
1112 : ca                       dex
1113 : ca                       dex
1114 : ca                       dex
1115 : f003                     beq range_ok    ;+127 - max forward
1117 : 4c1711                   jmp *           ;trap bad range
111a :                  range_ok
111a : c000                     cpy #0
111c : f003                     beq range_end
111e : 4c0410                   jmp range_loop
1121 :                  range_end               ;range test successful
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
1121 : c001                     cpy #1          ;testing BNE true
1123 : d003                     bne test_bne
1125 : 4c2511                   jmp *
1128 :                  test_bne
1128 : a900                     lda #0
112a : c900                     cmp #0          ;test compare immediate
112c : d0fe                     bne *
112e : 90fe                     bcc *
1130 : 30fe                     bmi *
1132 : c901                     cmp #1
1134 : f0fe                     beq *
1136 : b0fe                     bcs *
1138 : 10fe                     bpl *
113a : aa                       tax
113b : e000                     cpx #0          ;test compare x immediate
113d : d0fe                     bne *
113f : 90fe                     bcc *
1141 : 30fe                     bmi *
1143 : e001                     cpx #1
1145 : f0fe                     beq *
1147 : b0fe                     bcs *
1149 : 10fe                     bpl *
114b : a8                       tay
114c : c000                     cpy #0          ;test compare y immediate
114e : d0fe                     bne *
1150 : 90fe                     bcc *
1152 : 30fe                     bmi *
1154 : c001                     cpy #1
1156 : f0fe                     beq *
1158 : b0fe                     bcs *
115a : 10fe                     bpl *
                        ;testing stack operations PHA PHP PLA PLP
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                        
115c : a2ff                     ldx #$ff        ;initialize stack
115e : 9a                       txs
115f : a955                     lda #$55
1161 : 48                       pha
1162 : a9aa                     lda #$aa
1164 : 48                       pha
1165 : cdfe01                   cmp $1fe        ;on stack ?
1168 : d0fe                     bne *
116a : ba                       tsx
116b : 8a                       txa             ;overwrite accu
116c : c9fd                     cmp #$fd        ;sp decremented?
116e : d0fe                     bne *
1170 : 68                       pla
1171 : c9aa                     cmp #$aa        ;successful retreived from stack?
1173 : d0fe                     bne *
1175 : 68                       pla
1176 : c955                     cmp #$55
1178 : d0fe                     bne *
117a : cdff01                   cmp $1ff        ;remains on stack?
117d : d0fe                     bne *
117f : ba                       tsx
1180 : e0ff                     cpx #$ff        ;sp incremented?
1182 : d0fe                     bne *
                                set_stat $ff    ;all on
                        
1188 : 10fe                     bpl *           ;branches should not be taken
118a : 50fe                     bvc *
118c : 90fe                     bcc *
118e : d0fe                     bne *
1190 : 3003                     bmi br1          ;branches should be taken
1192 : 4c9211                   jmp *
1195 : 7003             br1     bvs br2
1197 : 4c9711                   jmp *
119a : b003             br2     bcs br3
119c : 4c9c11                   jmp *
119f : f003             br3     beq br4
11a1 : 4ca111                   jmp *
11a4 : 08               br4     php
11a5 : ba                       tsx
11a6 : e0fe                     cpx #$fe        ;sp after php?
11a8 : d0fe                     bne *
11aa : 68                       pla
                                cmp_flag $ff        ;returned all flags on?
                        
11ad : d0fe                     bne *
11af : ba                       tsx
11b0 : e0ff                     cpx #$ff        ;sp after php?
11b2 : d0fe                     bne *
                                set_stat 0      ;all off
                        
11b8 : 30fe                     bmi *           ;branches should not be taken
11ba : 70fe                     bvs *
11bc : b0fe                     bcs *
11be : f0fe                     beq *
11c0 : 1003                     bpl br11        ;branches should be taken
11c2 : 4cc211                   jmp *
11c5 : 5003             br11    bvc br12
11c7 : 4cc711                   jmp *
11ca : 9003             br12    bcc br13
11cc : 4ccc11                   jmp *
11cf : d003             br13    bne br14
11d1 : 4cd111                   jmp *
11d4 : 08               br14    php
11d5 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
                        
11d8 : d0fe                     bne *
                                ;crosscheck flags
                                set_stat carry
                        
11de : 90fe                     bcc *
                                set_stat zero
                        
11e4 : d0fe                     bne *
                                set_stat overfl
                        
11ea : 50fe                     bvc *
                                set_stat minus
                        
11f0 : 10fe                     bpl *
                                set_stat $ff-carry
                        
11f6 : b0fe                     bcs *
                                set_stat $ff-zero
                        
11fc : f0fe                     beq *
                                set_stat $ff-overfl
                        
1202 : 70fe                     bvs *
                                set_stat $ff-minus
                        
1208 : 30fe                     bmi *
                        
                        ; partial pretest EOR #
                                set_a $3c,0
                        
1210 : 49c3                     eor #$c3
                                tst_a $ff,fn
                        
                                set_a $c3,0
                        
1224 : 49c3                     eor #$c3
                                tst_a 0,fz
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
1232 : a224                     ldx #$24
1234 : a042                     ldy #$42
                                set_a $18,0
                        
123c : ea                       nop
                                tst_a $18,0
                        
1249 : e024                     cpx #$24
124b : d0fe                     bne *
124d : c042                     cpy #$42
124f : d0fe                     bne *
1251 : a2db                     ldx #$db
1253 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                        
125b : ea                       nop
                                tst_a $e7,$ff
                        
1268 : e0db                     cpx #$db
126a : d0fe                     bne *
126c : c0bd                     cpy #$bd
126e : d0fe                     bne *
                        
                        ; jump absolute
                                set_stat $0
                        
1274 : a946                     lda #'F'
1276 : a241                     ldx #'A'
1278 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
127a : 4c103e                   jmp test_far
127d : ea                       nop
127e : ea                       nop
127f : d0fe                     bne *           ;runover protection
1281 : e8                       inx
1282 : e8                       inx
1283 : f0fe             far_ret beq *           ;returned flags OK?
1285 : 10fe                     bpl *
1287 : 90fe                     bcc *
1289 : 50fe                     bvc *
128b : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
128d : d0fe                     bne *
128f : e042                     cpx #('A'+1)
1291 : d0fe                     bne *
1293 : c04f                     cpy #('R'-3)
1295 : d0fe                     bne *
1297 : ca                       dex
1298 : c8                       iny
1299 : c8                       iny
129a : c8                       iny
129b : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
129d : 4ca612                   jmp test_near
12a0 : ea                       nop
12a1 : ea                       nop
12a2 : d0fe                     bne *           ;runover protection
12a4 : e8                       inx
12a5 : e8                       inx
12a6 :                  test_near
12a6 : f0fe                     beq *           ;passed flags OK?
12a8 : 30fe                     bmi *
12aa : 90fe                     bcc *
12ac : 50fe                     bvc *
12ae : c946                     cmp #'F'        ;passed registers OK?
12b0 : d0fe                     bne *
12b2 : e041                     cpx #'A'
12b4 : d0fe                     bne *
12b6 : c052                     cpy #'R'
12b8 : d0fe                     bne *
                        
                        ; jump indirect
                                set_stat 0
                        
12be : a949                     lda #'I'
12c0 : a24e                     ldx #'N'
12c2 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
12c4 : 6c3e3e                   jmp (ptr_tst_ind)
12c7 : ea                       nop
12c8 : d0fe                     bne *           ;runover protection
12ca : 88                       dey
12cb : 88                       dey
12cc :                  ind_ret
12cc : 08                       php             ;either SP or Y count will fail, if we do not hit
12cd : 88                       dey
12ce : 88                       dey
12cf : 88                       dey
12d0 : 28                       plp
12d1 : f0fe                     beq *           ;returned flags OK?
12d3 : 10fe                     bpl *
12d5 : 90fe                     bcc *
12d7 : 50fe                     bvc *
12d9 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
12db : d0fe                     bne *
12dd : e04f                     cpx #('N'+1)
12df : d0fe                     bne *
12e1 : c03e                     cpy #('D'-6)
12e3 : d0fe                     bne *
12e5 : ba                       tsx             ;SP check
12e6 : e0ff                     cpx #$ff
12e8 : d0fe                     bne *
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                        
12ee : a94a                     lda #'J'
12f0 : a253                     ldx #'S'
12f2 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
12f4 : 207a3e                   jsr test_jsr
12f6 =                  jsr_ret = *-1           ;last address of jsr = return address
12f7 : 08                       php             ;either SP or Y count will fail, if we do not hit
12f8 : 88                       dey
12f9 : 88                       dey
12fa : 88                       dey
12fb : 28                       plp
12fc : f0fe                     beq *           ;returned flags OK?
12fe : 10fe                     bpl *
1300 : 90fe                     bcc *
1302 : 50fe                     bvc *
1304 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
1306 : d0fe                     bne *
1308 : e054                     cpx #('S'+1)
130a : d0fe                     bne *
130c : c04c                     cpy #('R'-6)
130e : d0fe                     bne *
1310 : ba                       tsx             ;sp?
1311 : e0ff                     cpx #$ff
1313 : d0fe                     bne *
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                set_stat 0
                        
1319 : a942                     lda #'B'
131b : a252                     ldx #'R'
131d : a04b                     ldy #'K'        ;N=0, V=0, Z=0, C=0
131f : 00                       brk
                            else
                                lda #hi brk_ret ;emulated break
                                pha
                                lda #lo brk_ret
                                pha
                                lda #$30        ;set break & unused on stack
                                pha
                                set_stat intdis
                                lda #'B'
                                ldx #'R'
                                ldy #'K'        ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
1320 : 88                       dey             ;should not be executed
1321 :                  brk_ret                 ;address of break return
1321 : 08                       php             ;either SP or Y count will fail, if we do not hit
1322 : 88                       dey
1323 : 88                       dey
1324 : 88                       dey
1325 : c9e8                     cmp #('B'^$aa)  ;returned registers OK?
1327 : d0fe                     bne *
1329 : e053                     cpx #('R'+1)
132b : d0fe                     bne *
132d : c045                     cpy #('K'-6)
132f : d0fe                     bne *
1331 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
                        
1334 : d0fe                     bne *
1336 : ba                       tsx             ;sp?
1337 : e0ff                     cpx #$ff
1339 : d0fe                     bne *
                        
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                        
133f : 18                       clc
                                tst_stat $ff-carry
                        
1348 : 38                       sec
                                tst_stat $ff
                        
                            if I_flag = 3
                                cli
                                tst_stat $ff-intdis
                                sei
                                tst_stat $ff
                            endif
1351 : d8                       cld
                                tst_stat $ff-decmode
                        
135a : f8                       sed
                                tst_stat $ff
                        
1363 : b8                       clv
                                tst_stat $ff-overfl
                        
                                set_stat 0
                        
                                tst_stat 0
                        
1378 : 38                       sec
                                tst_stat carry
                        
1381 : 18                       clc
                                tst_stat 0
                        
                            if I_flag = 3
                                sei
                                tst_stat intdis
                                cli
                                tst_stat 0
                            endif
138a : f8                       sed
                                tst_stat decmode
                        
1393 : d8                       cld
                                tst_stat 0
                        
                                set_stat overfl
                        
                                tst_stat overfl
                        
13a8 : b8                       clv
                                tst_stat 0
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA
13b1 : a2fe                     ldx #$fe
                                set_stat $ff
                        
13b7 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
                        
13c4 : e8                       inx             ;00
                                tst_x 0,$ff-minus
                        
13d1 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
                        
13de : ca                       dex             ;00
                                tst_x 0,$ff-minus
                        
13eb : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
                        
13f8 : ca                       dex             ;fe
                                set_stat 0
                        
13fd : e8                       inx             ;ff
                                tst_x $ff,minus
                        
140a : e8                       inx             ;00
                                tst_x 0,zero
                        
1417 : e8                       inx             ;01
                                tst_x 1,0
                        
1424 : ca                       dex             ;00
                                tst_x 0,zero
                        
1431 : ca                       dex             ;ff
                                tst_x $ff,minus
                        
                        
143e : a0fe                     ldy #$fe
                                set_stat $ff
                        
1444 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
                        
1451 : c8                       iny             ;00
                                tst_y 0,$ff-minus
                        
145e : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
                        
146b : 88                       dey             ;00
                                tst_y 0,$ff-minus
                        
1478 : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
                        
1485 : 88                       dey             ;fe
                                set_stat 0
                        
148a : c8                       iny             ;ff
                                tst_y $ff,0+minus
                        
1497 : c8                       iny             ;00
                                tst_y 0,zero
                        
14a4 : c8                       iny             ;01
                                tst_y 1,0
                        
14b1 : 88                       dey             ;00
                                tst_y 0,zero
                        
14be : 88                       dey             ;ff
                                tst_y $ff,minus
                        
                        
14cb : a2ff                     ldx #$ff
                                set_stat $ff
                        
14d1 : 8a                       txa
                                tst_a $ff,$ff-zero
                        
14de : 08                       php
14df : e8                       inx             ;00
14e0 : 28                       plp
14e1 : 8a                       txa
                                tst_a 0,$ff-minus
                        
14ee : 08                       php
14ef : e8                       inx             ;01
14f0 : 28                       plp
14f1 : 8a                       txa
                                tst_a 1,$ff-minus-zero
                        
                                set_stat 0
                        
1502 : 8a                       txa
                                tst_a 1,0
                        
150f : 08                       php
1510 : ca                       dex             ;00
1511 : 28                       plp
1512 : 8a                       txa
                                tst_a 0,zero
                        
151f : 08                       php
1520 : ca                       dex             ;ff
1521 : 28                       plp
1522 : 8a                       txa
                                tst_a $ff,minus
                        
                        
152f : a0ff                     ldy #$ff
                                set_stat $ff
                        
1535 : 98                       tya
                                tst_a $ff,$ff-zero
                        
1542 : 08                       php
1543 : c8                       iny             ;00
1544 : 28                       plp
1545 : 98                       tya
                                tst_a 0,$ff-minus
                        
1552 : 08                       php
1553 : c8                       iny             ;01
1554 : 28                       plp
1555 : 98                       tya
                                tst_a 1,$ff-minus-zero
                        
                                set_stat 0
                        
1566 : 98                       tya
                                tst_a 1,0
                        
1573 : 08                       php
1574 : 88                       dey             ;00
1575 : 28                       plp
1576 : 98                       tya
                                tst_a 0,zero
                        
1583 : 08                       php
1584 : 88                       dey             ;ff
1585 : 28                       plp
1586 : 98                       tya
                                tst_a $ff,minus
                        
                        
                                load_flag $ff
                        
1595 : 48                       pha
1596 : a2ff                     ldx #$ff        ;ff
1598 : 8a                       txa
1599 : 28                       plp
159a : a8                       tay
                                tst_y $ff,$ff-zero
                        
15a7 : 08                       php
15a8 : e8                       inx             ;00
15a9 : 8a                       txa
15aa : 28                       plp
15ab : a8                       tay
                                tst_y 0,$ff-minus
                        
15b8 : 08                       php
15b9 : e8                       inx             ;01
15ba : 8a                       txa
15bb : 28                       plp
15bc : a8                       tay
                                tst_y 1,$ff-minus-zero
                        
                                load_flag 0
                        
15cb : 48                       pha
15cc : a900                     lda #0
15ce : 8a                       txa
15cf : 28                       plp
15d0 : a8                       tay
                                tst_y 1,0
                        
15dd : 08                       php
15de : ca                       dex             ;00
15df : 8a                       txa
15e0 : 28                       plp
15e1 : a8                       tay
                                tst_y 0,zero
                        
15ee : 08                       php
15ef : ca                       dex             ;ff
15f0 : 8a                       txa
15f1 : 28                       plp
15f2 : a8                       tay
                                tst_y $ff,minus
                        
                        
                        
                                load_flag $ff
                        
1601 : 48                       pha
1602 : a0ff                     ldy #$ff        ;ff
1604 : 98                       tya
1605 : 28                       plp
1606 : aa                       tax
                                tst_x $ff,$ff-zero
                        
1613 : 08                       php
1614 : c8                       iny             ;00
1615 : 98                       tya
1616 : 28                       plp
1617 : aa                       tax
                                tst_x 0,$ff-minus
                        
1624 : 08                       php
1625 : c8                       iny             ;01
1626 : 98                       tya
1627 : 28                       plp
1628 : aa                       tax
                                tst_x 1,$ff-minus-zero
                        
                                load_flag 0
                        
1637 : 48                       pha
1638 : a900                     lda #0          ;preset status
163a : 98                       tya
163b : 28                       plp
163c : aa                       tax
                                tst_x 1,0
                        
1649 : 08                       php
164a : 88                       dey             ;00
164b : 98                       tya
164c : 28                       plp
164d : aa                       tax
                                tst_x 0,zero
                        
165a : 08                       php
165b : 88                       dey             ;ff
165c : 98                       tya
165d : 28                       plp
165e : aa                       tax
                                tst_x $ff,minus
                        
                        
                        ;TSX sets NZ - TXS does not
166b : a201                     ldx #1          ;01
                                set_stat $ff
                        
1671 : 9a                       txs
1672 : 08                       php
1673 : ad0101                   lda $101
                                cmp_flag $ff
                        
1678 : d0fe                     bne *
                                set_stat 0
                        
167e : 9a                       txs
167f : 08                       php
1680 : ad0101                   lda $101
                                cmp_flag 0
                        
1685 : d0fe                     bne *
1687 : ca                       dex             ;00
                                set_stat $ff
                        
168c : 9a                       txs
168d : 08                       php
168e : ad0001                   lda $100
                                cmp_flag $ff
                        
1693 : d0fe                     bne *
                                set_stat 0
                        
1699 : 9a                       txs
169a : 08                       php
169b : ad0001                   lda $100
                                cmp_flag 0
                        
16a0 : d0fe                     bne *
16a2 : ca                       dex             ;ff
                                set_stat $ff
                        
16a7 : 9a                       txs
16a8 : 08                       php
16a9 : adff01                   lda $1ff
                                cmp_flag $ff
                        
16ae : d0fe                     bne *
                                set_stat 0
                        
16b4 : 9a                       txs
16b5 : 08                       php
16b6 : adff01                   lda $1ff
                                cmp_flag 0
                        
                        
16bb : a201                     ldx #1
16bd : 9a                       txs             ;sp=01
                                set_stat $ff
                        
16c2 : ba                       tsx             ;clears Z, N
16c3 : 08                       php             ;sp=00
16c4 : e001                     cpx #1
16c6 : d0fe                     bne *
16c8 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
                        
16cd : d0fe                     bne *
                                set_stat $ff
                        
16d3 : ba                       tsx             ;clears N, sets Z
16d4 : 08                       php             ;sp=ff
16d5 : e000                     cpx #0
16d7 : d0fe                     bne *
16d9 : ad0001                   lda $100
                                cmp_flag $ff-minus
                        
16de : d0fe                     bne *
                                set_stat $ff
                        
16e4 : ba                       tsx             ;clears N, sets Z
16e5 : 08                       php             ;sp=fe
16e6 : e0ff                     cpx #$ff
16e8 : d0fe                     bne *
16ea : adff01                   lda $1ff
                                cmp_flag $ff-zero
                        
16ef : d0fe                     bne *
                        
16f1 : a201                     ldx #1
16f3 : 9a                       txs             ;sp=01
                                set_stat 0
                        
16f8 : ba                       tsx             ;clears Z, N
16f9 : 08                       php             ;sp=00
16fa : e001                     cpx #1
16fc : d0fe                     bne *
16fe : ad0101                   lda $101
                                cmp_flag 0
                        
1703 : d0fe                     bne *
                                set_stat 0
                        
1709 : ba                       tsx             ;clears N, sets Z
170a : 08                       php             ;sp=ff
170b : e000                     cpx #0
170d : d0fe                     bne *
170f : ad0001                   lda $100
                                cmp_flag zero
                        
1714 : d0fe                     bne *
                                set_stat 0
                        
171a : ba                       tsx             ;clears N, sets Z
171b : 08                       php             ;sp=fe
171c : e0ff                     cpx #$ff
171e : d0fe                     bne *
1720 : adff01                   lda $1ff
                                cmp_flag minus
                        
1725 : d0fe                     bne *
1727 : 68                       pla             ;sp=ff
                        
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
1728 : a003                     ldy #3
172a :                  tldx
                                set_stat 0
                        
172e : b60a                     ldx zp1,y
1730 : 08                       php         ;test stores do not alter flags
1731 : 8a                       txa
1732 : 49c3                     eor #$c3
1734 : 28                       plp
1735 : 993302                   sta abst,y
1738 : 08                       php         ;flags after load/store sequence
1739 : 49c3                     eor #$c3
173b : d90002                   cmp abs1,y  ;test result
173e : d0fe                     bne *       ;trap
1740 : 68                       pla         ;load status
                                eor_flag 0    ;always on bits
                        
1743 : d90502                   cmp fLDx,y  ;test flags
1746 : d0fe                     bne *       ;trap
1748 : 88                       dey
1749 : 10df                     bpl tldx
                        
174b : a003                     ldy #3
174d :                  tldx1
                                set_stat $ff
                        
1751 : b60a                     ldx zp1,y
1753 : 08                       php         ;test stores do not alter flags
1754 : 8a                       txa
1755 : 49c3                     eor #$c3
1757 : 28                       plp
1758 : 993302                   sta abst,y
175b : 08                       php         ;flags after load/store sequence
175c : 49c3                     eor #$c3
175e : d90002                   cmp abs1,y  ;test result
1761 : d0fe                     bne *       ;trap
1763 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1766 : d90502                   cmp fLDx,y  ;test flags
1769 : d0fe                     bne *       ;trap
176b : 88                       dey
176c : 10df                     bpl tldx1
                        
176e : a003                     ldy #3
1770 :                  tldx2
                                set_stat 0
                        
1774 : be0002                   ldx abs1,y
1777 : 08                       php         ;test stores do not alter flags
1778 : 8a                       txa
1779 : 49c3                     eor #$c3
177b : aa                       tax
177c : 28                       plp
177d : 960f                     stx zpt,y
177f : 08                       php         ;flags after load/store sequence
1780 : 49c3                     eor #$c3
1782 : d90a00                   cmp zp1,y   ;test result
1785 : d0fe                     bne *       ;trap
1787 : 68                       pla         ;load status
                                eor_flag 0
                        
178a : d90502                   cmp fLDx,y  ;test flags
178d : d0fe                     bne *       ;trap
178f : 88                       dey
1790 : 10de                     bpl tldx2
                        
1792 : a003                     ldy #3
1794 :                  tldx3
                                set_stat $ff
                        
1798 : be0002                   ldx abs1,y
179b : 08                       php         ;test stores do not alter flags
179c : 8a                       txa
179d : 49c3                     eor #$c3
179f : aa                       tax
17a0 : 28                       plp
17a1 : 960f                     stx zpt,y
17a3 : 08                       php         ;flags after load/store sequence
17a4 : 49c3                     eor #$c3
17a6 : d90a00                   cmp zp1,y   ;test result
17a9 : d0fe                     bne *       ;trap
17ab : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
17ae : d90502                   cmp fLDx,y  ;test flags
17b1 : d0fe                     bne *       ;trap
17b3 : 88                       dey
17b4 : 10de                     bpl tldx3
                        
17b6 : a003                     ldy #3      ;testing store result
17b8 : a200                     ldx #0
17ba : b90f00           tstx    lda zpt,y
17bd : 49c3                     eor #$c3
17bf : d90a00                   cmp zp1,y
17c2 : d0fe                     bne *       ;trap: store to zp data
17c4 : 960f                     stx zpt,y   ;clear
17c6 : b93302                   lda abst,y
17c9 : 49c3                     eor #$c3
17cb : d90002                   cmp abs1,y
17ce : d0fe                     bne *       ;trap: store to abs data
17d0 : 8a                       txa
17d1 : 993302                   sta abst,y  ;clear
17d4 : 88                       dey
17d5 : 10e3                     bpl tstx
                        
                        ; indexed wraparound test (only zp should wrap)
17d7 : a0fd                     ldy #3+$fa
17d9 : b610             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
17db : 8a                       txa
17dc : 993901                   sta abst-$fa,y      ;no STX abs,y!
17df : 88                       dey
17e0 : c0fa                     cpy #$fa
17e2 : b0f5                     bcs tldx4
17e4 : a0fd                     ldy #3+$fa
17e6 : be0601           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
17e9 : 9615                     stx zpt-$fa&$ff,y
17eb : 88                       dey
17ec : c0fa                     cpy #$fa
17ee : b0f6                     bcs tldx5
17f0 : a003                     ldy #3      ;testing wraparound result
17f2 : a200                     ldx #0
17f4 : b90f00           tstx1   lda zpt,y
17f7 : d90a00                   cmp zp1,y
17fa : d0fe                     bne *       ;trap: store to zp data
17fc : 960f                     stx zpt,y   ;clear
17fe : b93302                   lda abst,y
1801 : d90002                   cmp abs1,y
1804 : d0fe                     bne *       ;trap: store to abs data
1806 : 8a                       txa
1807 : 993302                   sta abst,y  ;clear
180a : 88                       dey
180b : 10e7                     bpl tstx1
                        
                        ; LDY / STY - zp,x / abs,x
180d : a203                     ldx #3
180f :                  tldy
                                set_stat 0
                        
1813 : b40a                     ldy zp1,x
1815 : 08                       php         ;test stores do not alter flags
1816 : 98                       tya
1817 : 49c3                     eor #$c3
1819 : 28                       plp
181a : 9d3302                   sta abst,x
181d : 08                       php         ;flags after load/store sequence
181e : 49c3                     eor #$c3
1820 : dd0002                   cmp abs1,x  ;test result
1823 : d0fe                     bne *       ;trap
1825 : 68                       pla         ;load status
                                eor_flag 0
                        
1828 : dd0502                   cmp fLDx,x  ;test flags
182b : d0fe                     bne *       ;trap
182d : ca                       dex
182e : 10df                     bpl tldy
                        
1830 : a203                     ldx #3
1832 :                  tldy1
                                set_stat $ff
                        
1836 : b40a                     ldy zp1,x
1838 : 08                       php         ;test stores do not alter flags
1839 : 98                       tya
183a : 49c3                     eor #$c3
183c : 28                       plp
183d : 9d3302                   sta abst,x
1840 : 08                       php         ;flags after load/store sequence
1841 : 49c3                     eor #$c3
1843 : dd0002                   cmp abs1,x   ;test result
1846 : d0fe                     bne *       ;trap
1848 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
184b : dd0502                   cmp fLDx,x  ;test flags
184e : d0fe                     bne *       ;trap
1850 : ca                       dex
1851 : 10df                     bpl tldy1
                        
1853 : a203                     ldx #3
1855 :                  tldy2
                                set_stat 0
                        
1859 : bc0002                   ldy abs1,x
185c : 08                       php         ;test stores do not alter flags
185d : 98                       tya
185e : 49c3                     eor #$c3
1860 : a8                       tay
1861 : 28                       plp
1862 : 940f                     sty zpt,x
1864 : 08                       php         ;flags after load/store sequence
1865 : 49c3                     eor #$c3
1867 : d50a                     cmp zp1,x   ;test result
1869 : d0fe                     bne *       ;trap
186b : 68                       pla         ;load status
                                eor_flag 0
                        
186e : dd0502                   cmp fLDx,x  ;test flags
1871 : d0fe                     bne *       ;trap
1873 : ca                       dex
1874 : 10df                     bpl tldy2
                        
1876 : a203                     ldx #3
1878 :                  tldy3
                                set_stat $ff
                        
187c : bc0002                   ldy abs1,x
187f : 08                       php         ;test stores do not alter flags
1880 : 98                       tya
1881 : 49c3                     eor #$c3
1883 : a8                       tay
1884 : 28                       plp
1885 : 940f                     sty zpt,x
1887 : 08                       php         ;flags after load/store sequence
1888 : 49c3                     eor #$c3
188a : d50a                     cmp zp1,x   ;test result
188c : d0fe                     bne *       ;trap
188e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1891 : dd0502                   cmp fLDx,x  ;test flags
1894 : d0fe                     bne *       ;trap
1896 : ca                       dex
1897 : 10df                     bpl tldy3
                        
1899 : a203                     ldx #3      ;testing store result
189b : a000                     ldy #0
189d : b50f             tsty    lda zpt,x
189f : 49c3                     eor #$c3
18a1 : d50a                     cmp zp1,x
18a3 : d0fe                     bne *       ;trap: store to zp,x data
18a5 : 940f                     sty zpt,x   ;clear
18a7 : bd3302                   lda abst,x
18aa : 49c3                     eor #$c3
18ac : dd0002                   cmp abs1,x
18af : d0fe                     bne *       ;trap: store to abs,x data
18b1 : 8a                       txa
18b2 : 9d3302                   sta abst,x  ;clear
18b5 : ca                       dex
18b6 : 10e5                     bpl tsty
                        
                        ; indexed wraparound test (only zp should wrap)
18b8 : a2fd                     ldx #3+$fa
18ba : b410             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
18bc : 98                       tya
18bd : 9d3901                   sta abst-$fa,x      ;no STX abs,x!
18c0 : ca                       dex
18c1 : e0fa                     cpx #$fa
18c3 : b0f5                     bcs tldy4
18c5 : a2fd                     ldx #3+$fa
18c7 : bc0601           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
18ca : 9415                     sty zpt-$fa&$ff,x
18cc : ca                       dex
18cd : e0fa                     cpx #$fa
18cf : b0f6                     bcs tldy5
18d1 : a203                     ldx #3      ;testing wraparound result
18d3 : a000                     ldy #0
18d5 : b50f             tsty1   lda zpt,x
18d7 : d50a                     cmp zp1,x
18d9 : d0fe                     bne *       ;trap: store to zp,x data
18db : 940f                     sty zpt,x   ;clear
18dd : bd3302                   lda abst,x
18e0 : dd0002                   cmp abs1,x
18e3 : d0fe                     bne *       ;trap: store to abs,x data
18e5 : 8a                       txa
18e6 : 9d3302                   sta abst,x  ;clear
18e9 : ca                       dex
18ea : 10e9                     bpl tsty1
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0
                        
18f0 : a60a                     ldx zp1
18f2 : 08                       php         ;test stores do not alter flags
18f3 : 8a                       txa
18f4 : 49c3                     eor #$c3
18f6 : aa                       tax
18f7 : 28                       plp
18f8 : 8e3302                   stx abst
18fb : 08                       php         ;flags after load/store sequence
18fc : 49c3                     eor #$c3
18fe : aa                       tax
18ff : e0c3                     cpx #$c3    ;test result
1901 : d0fe                     bne *       ;trap
1903 : 68                       pla         ;load status
                                eor_flag 0
                        
1906 : cd0502                   cmp fLDx    ;test flags
1909 : d0fe                     bne *       ;trap
                                set_stat 0
                        
190f : a60b                     ldx zp1+1
1911 : 08                       php         ;test stores do not alter flags
1912 : 8a                       txa
1913 : 49c3                     eor #$c3
1915 : aa                       tax
1916 : 28                       plp
1917 : 8e3402                   stx abst+1
191a : 08                       php         ;flags after load/store sequence
191b : 49c3                     eor #$c3
191d : aa                       tax
191e : e082                     cpx #$82    ;test result
1920 : d0fe                     bne *       ;trap
1922 : 68                       pla         ;load status
                                eor_flag 0
                        
1925 : cd0602                   cmp fLDx+1  ;test flags
1928 : d0fe                     bne *       ;trap
                                set_stat 0
                        
192e : a60c                     ldx zp1+2
1930 : 08                       php         ;test stores do not alter flags
1931 : 8a                       txa
1932 : 49c3                     eor #$c3
1934 : aa                       tax
1935 : 28                       plp
1936 : 8e3502                   stx abst+2
1939 : 08                       php         ;flags after load/store sequence
193a : 49c3                     eor #$c3
193c : aa                       tax
193d : e041                     cpx #$41    ;test result
193f : d0fe                     bne *       ;trap
1941 : 68                       pla         ;load status
                                eor_flag 0
                        
1944 : cd0702                   cmp fLDx+2  ;test flags
1947 : d0fe                     bne *       ;trap
                                set_stat 0
                        
194d : a60d                     ldx zp1+3
194f : 08                       php         ;test stores do not alter flags
1950 : 8a                       txa
1951 : 49c3                     eor #$c3
1953 : aa                       tax
1954 : 28                       plp
1955 : 8e3602                   stx abst+3
1958 : 08                       php         ;flags after load/store sequence
1959 : 49c3                     eor #$c3
195b : aa                       tax
195c : e000                     cpx #0      ;test result
195e : d0fe                     bne *       ;trap
1960 : 68                       pla         ;load status
                                eor_flag 0
                        
1963 : cd0802                   cmp fLDx+3  ;test flags
1966 : d0fe                     bne *       ;trap
                        
                                set_stat $ff
                        
196c : a60a                     ldx zp1
196e : 08                       php         ;test stores do not alter flags
196f : 8a                       txa
1970 : 49c3                     eor #$c3
1972 : aa                       tax
1973 : 28                       plp
1974 : 8e3302                   stx abst
1977 : 08                       php         ;flags after load/store sequence
1978 : 49c3                     eor #$c3
197a : aa                       tax
197b : e0c3                     cpx #$c3    ;test result
197d : d0fe                     bne *       ;trap
197f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1982 : cd0502                   cmp fLDx    ;test flags
1985 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
198b : a60b                     ldx zp1+1
198d : 08                       php         ;test stores do not alter flags
198e : 8a                       txa
198f : 49c3                     eor #$c3
1991 : aa                       tax
1992 : 28                       plp
1993 : 8e3402                   stx abst+1
1996 : 08                       php         ;flags after load/store sequence
1997 : 49c3                     eor #$c3
1999 : aa                       tax
199a : e082                     cpx #$82    ;test result
199c : d0fe                     bne *       ;trap
199e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
19a1 : cd0602                   cmp fLDx+1  ;test flags
19a4 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
19aa : a60c                     ldx zp1+2
19ac : 08                       php         ;test stores do not alter flags
19ad : 8a                       txa
19ae : 49c3                     eor #$c3
19b0 : aa                       tax
19b1 : 28                       plp
19b2 : 8e3502                   stx abst+2
19b5 : 08                       php         ;flags after load/store sequence
19b6 : 49c3                     eor #$c3
19b8 : aa                       tax
19b9 : e041                     cpx #$41    ;test result
19bb : d0fe                     bne *       ;trap
19bd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
19c0 : cd0702                   cmp fLDx+2  ;test flags
19c3 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
19c9 : a60d                     ldx zp1+3
19cb : 08                       php         ;test stores do not alter flags
19cc : 8a                       txa
19cd : 49c3                     eor #$c3
19cf : aa                       tax
19d0 : 28                       plp
19d1 : 8e3602                   stx abst+3
19d4 : 08                       php         ;flags after load/store sequence
19d5 : 49c3                     eor #$c3
19d7 : aa                       tax
19d8 : e000                     cpx #0      ;test result
19da : d0fe                     bne *       ;trap
19dc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
19df : cd0802                   cmp fLDx+3  ;test flags
19e2 : d0fe                     bne *       ;trap
                        
                                set_stat 0
                        
19e8 : ae0002                   ldx abs1
19eb : 08                       php         ;test stores do not alter flags
19ec : 8a                       txa
19ed : 49c3                     eor #$c3
19ef : aa                       tax
19f0 : 28                       plp
19f1 : 860f                     stx zpt
19f3 : 08                       php         ;flags after load/store sequence
19f4 : 49c3                     eor #$c3
19f6 : c50a                     cmp zp1     ;test result
19f8 : d0fe                     bne *       ;trap
19fa : 68                       pla         ;load status
                                eor_flag 0    ;always on bits
                        
19fd : cd0502                   cmp fLDx    ;test flags
1a00 : d0fe                     bne *       ;trap
                                set_stat 0
                        
1a06 : ae0102                   ldx abs1+1
1a09 : 08                       php         ;test stores do not alter flags
1a0a : 8a                       txa
1a0b : 49c3                     eor #$c3
1a0d : aa                       tax
1a0e : 28                       plp
1a0f : 8610                     stx zpt+1
1a11 : 08                       php         ;flags after load/store sequence
1a12 : 49c3                     eor #$c3
1a14 : c50b                     cmp zp1+1   ;test result
1a16 : d0fe                     bne *       ;trap
1a18 : 68                       pla         ;load status
                                eor_flag 0
                        
1a1b : cd0602                   cmp fLDx+1  ;test flags
1a1e : d0fe                     bne *       ;trap
                                set_stat 0
                        
1a24 : ae0202                   ldx abs1+2
1a27 : 08                       php         ;test stores do not alter flags
1a28 : 8a                       txa
1a29 : 49c3                     eor #$c3
1a2b : aa                       tax
1a2c : 28                       plp
1a2d : 8611                     stx zpt+2
1a2f : 08                       php         ;flags after load/store sequence
1a30 : 49c3                     eor #$c3
1a32 : c50c                     cmp zp1+2   ;test result
1a34 : d0fe                     bne *       ;trap
1a36 : 68                       pla         ;load status
                                eor_flag 0
                        
1a39 : cd0702                   cmp fLDx+2  ;test flags
1a3c : d0fe                     bne *       ;trap
                                set_stat 0
                        
1a42 : ae0302                   ldx abs1+3
1a45 : 08                       php         ;test stores do not alter flags
1a46 : 8a                       txa
1a47 : 49c3                     eor #$c3
1a49 : aa                       tax
1a4a : 28                       plp
1a4b : 8612                     stx zpt+3
1a4d : 08                       php         ;flags after load/store sequence
1a4e : 49c3                     eor #$c3
1a50 : c50d                     cmp zp1+3   ;test result
1a52 : d0fe                     bne *       ;trap
1a54 : 68                       pla         ;load status
                                eor_flag 0
                        
1a57 : cd0802                   cmp fLDx+3  ;test flags
1a5a : d0fe                     bne *       ;trap
                        
                                set_stat $ff
                        
1a60 : ae0002                   ldx abs1
1a63 : 08                       php         ;test stores do not alter flags
1a64 : 8a                       txa
1a65 : 49c3                     eor #$c3
1a67 : aa                       tax
1a68 : 28                       plp
1a69 : 860f                     stx zpt
1a6b : 08                       php         ;flags after load/store sequence
1a6c : 49c3                     eor #$c3
1a6e : aa                       tax
1a6f : e40a                     cpx zp1     ;test result
1a71 : d0fe                     bne *       ;trap
1a73 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1a76 : cd0502                   cmp fLDx    ;test flags
1a79 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1a7f : ae0102                   ldx abs1+1
1a82 : 08                       php         ;test stores do not alter flags
1a83 : 8a                       txa
1a84 : 49c3                     eor #$c3
1a86 : aa                       tax
1a87 : 28                       plp
1a88 : 8610                     stx zpt+1
1a8a : 08                       php         ;flags after load/store sequence
1a8b : 49c3                     eor #$c3
1a8d : aa                       tax
1a8e : e40b                     cpx zp1+1   ;test result
1a90 : d0fe                     bne *       ;trap
1a92 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1a95 : cd0602                   cmp fLDx+1  ;test flags
1a98 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1a9e : ae0202                   ldx abs1+2
1aa1 : 08                       php         ;test stores do not alter flags
1aa2 : 8a                       txa
1aa3 : 49c3                     eor #$c3
1aa5 : aa                       tax
1aa6 : 28                       plp
1aa7 : 8611                     stx zpt+2
1aa9 : 08                       php         ;flags after load/store sequence
1aaa : 49c3                     eor #$c3
1aac : aa                       tax
1aad : e40c                     cpx zp1+2   ;test result
1aaf : d0fe                     bne *       ;trap
1ab1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1ab4 : cd0702                   cmp fLDx+2  ;test flags
1ab7 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1abd : ae0302                   ldx abs1+3
1ac0 : 08                       php         ;test stores do not alter flags
1ac1 : 8a                       txa
1ac2 : 49c3                     eor #$c3
1ac4 : aa                       tax
1ac5 : 28                       plp
1ac6 : 8612                     stx zpt+3
1ac8 : 08                       php         ;flags after load/store sequence
1ac9 : 49c3                     eor #$c3
1acb : aa                       tax
1acc : e40d                     cpx zp1+3   ;test result
1ace : d0fe                     bne *       ;trap
1ad0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1ad3 : cd0802                   cmp fLDx+3  ;test flags
1ad6 : d0fe                     bne *       ;trap
                        
                                set_stat 0
                        
1adc : a2c3                     ldx #$c3
1ade : 08                       php
1adf : ec0002                   cpx abs1    ;test result
1ae2 : d0fe                     bne *       ;trap
1ae4 : 68                       pla         ;load status
                                eor_flag 0
                        
1ae7 : cd0502                   cmp fLDx    ;test flags
1aea : d0fe                     bne *       ;trap
                                set_stat 0
                        
1af0 : a282                     ldx #$82
1af2 : 08                       php
1af3 : ec0102                   cpx abs1+1  ;test result
1af6 : d0fe                     bne *       ;trap
1af8 : 68                       pla         ;load status
                                eor_flag 0
                        
1afb : cd0602                   cmp fLDx+1  ;test flags
1afe : d0fe                     bne *       ;trap
                                set_stat 0
                        
1b04 : a241                     ldx #$41
1b06 : 08                       php
1b07 : ec0202                   cpx abs1+2  ;test result
1b0a : d0fe                     bne *       ;trap
1b0c : 68                       pla         ;load status
                                eor_flag 0
                        
1b0f : cd0702                   cmp fLDx+2  ;test flags
1b12 : d0fe                     bne *       ;trap
                                set_stat 0
                        
1b18 : a200                     ldx #0
1b1a : 08                       php
1b1b : ec0302                   cpx abs1+3  ;test result
1b1e : d0fe                     bne *       ;trap
1b20 : 68                       pla         ;load status
                                eor_flag 0    ;always on bits
                        
1b23 : cd0802                   cmp fLDx+3  ;test flags
1b26 : d0fe                     bne *       ;trap
                        
                                set_stat $ff
                        
1b2c : a2c3                     ldx #$c3
1b2e : 08                       php
1b2f : ec0002                   cpx abs1    ;test result
1b32 : d0fe                     bne *       ;trap
1b34 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1b37 : cd0502                   cmp fLDx    ;test flags
1b3a : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1b40 : a282                     ldx #$82
1b42 : 08                       php
1b43 : ec0102                   cpx abs1+1  ;test result
1b46 : d0fe                     bne *       ;trap
1b48 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1b4b : cd0602                   cmp fLDx+1  ;test flags
1b4e : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1b54 : a241                     ldx #$41
1b56 : 08                       php
1b57 : ec0202                   cpx abs1+2  ;test result
1b5a : d0fe                     bne *       ;trap
1b5c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1b5f : cd0702                   cmp fLDx+2  ;test flags
1b62 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1b68 : a200                     ldx #0
1b6a : 08                       php
1b6b : ec0302                   cpx abs1+3  ;test result
1b6e : d0fe                     bne *       ;trap
1b70 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1b73 : cd0802                   cmp fLDx+3  ;test flags
1b76 : d0fe                     bne *       ;trap
                        
1b78 : a200                     ldx #0
1b7a : a50f                     lda zpt
1b7c : 49c3                     eor #$c3
1b7e : c50a                     cmp zp1
1b80 : d0fe                     bne *       ;trap: store to zp data
1b82 : 860f                     stx zpt     ;clear
1b84 : ad3302                   lda abst
1b87 : 49c3                     eor #$c3
1b89 : cd0002                   cmp abs1
1b8c : d0fe                     bne *       ;trap: store to abs data
1b8e : 8e3302                   stx abst    ;clear
1b91 : a510                     lda zpt+1
1b93 : 49c3                     eor #$c3
1b95 : c50b                     cmp zp1+1
1b97 : d0fe                     bne *       ;trap: store to zp data
1b99 : 8610                     stx zpt+1   ;clear
1b9b : ad3402                   lda abst+1
1b9e : 49c3                     eor #$c3
1ba0 : cd0102                   cmp abs1+1
1ba3 : d0fe                     bne *       ;trap: store to abs data
1ba5 : 8e3402                   stx abst+1  ;clear
1ba8 : a511                     lda zpt+2
1baa : 49c3                     eor #$c3
1bac : c50c                     cmp zp1+2
1bae : d0fe                     bne *       ;trap: store to zp data
1bb0 : 8611                     stx zpt+2   ;clear
1bb2 : ad3502                   lda abst+2
1bb5 : 49c3                     eor #$c3
1bb7 : cd0202                   cmp abs1+2
1bba : d0fe                     bne *       ;trap: store to abs data
1bbc : 8e3502                   stx abst+2  ;clear
1bbf : a512                     lda zpt+3
1bc1 : 49c3                     eor #$c3
1bc3 : c50d                     cmp zp1+3
1bc5 : d0fe                     bne *       ;trap: store to zp data
1bc7 : 8612                     stx zpt+3   ;clear
1bc9 : ad3602                   lda abst+3
1bcc : 49c3                     eor #$c3
1bce : cd0302                   cmp abs1+3
1bd1 : d0fe                     bne *       ;trap: store to abs data
1bd3 : 8e3602                   stx abst+3  ;clear
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                        
1bda : a40a                     ldy zp1
1bdc : 08                       php         ;test stores do not alter flags
1bdd : 98                       tya
1bde : 49c3                     eor #$c3
1be0 : a8                       tay
1be1 : 28                       plp
1be2 : 8c3302                   sty abst
1be5 : 08                       php         ;flags after load/store sequence
1be6 : 49c3                     eor #$c3
1be8 : a8                       tay
1be9 : c0c3                     cpy #$c3    ;test result
1beb : d0fe                     bne *       ;trap
1bed : 68                       pla         ;load status
                                eor_flag 0
                        
1bf0 : cd0502                   cmp fLDx    ;test flags
1bf3 : d0fe                     bne *       ;trap
                                set_stat 0
                        
1bf9 : a40b                     ldy zp1+1
1bfb : 08                       php         ;test stores do not alter flags
1bfc : 98                       tya
1bfd : 49c3                     eor #$c3
1bff : a8                       tay
1c00 : 28                       plp
1c01 : 8c3402                   sty abst+1
1c04 : 08                       php         ;flags after load/store sequence
1c05 : 49c3                     eor #$c3
1c07 : a8                       tay
1c08 : c082                     cpy #$82    ;test result
1c0a : d0fe                     bne *       ;trap
1c0c : 68                       pla         ;load status
                                eor_flag 0
                        
1c0f : cd0602                   cmp fLDx+1  ;test flags
1c12 : d0fe                     bne *       ;trap
                                set_stat 0
                        
1c18 : a40c                     ldy zp1+2
1c1a : 08                       php         ;test stores do not alter flags
1c1b : 98                       tya
1c1c : 49c3                     eor #$c3
1c1e : a8                       tay
1c1f : 28                       plp
1c20 : 8c3502                   sty abst+2
1c23 : 08                       php         ;flags after load/store sequence
1c24 : 49c3                     eor #$c3
1c26 : a8                       tay
1c27 : c041                     cpy #$41    ;test result
1c29 : d0fe                     bne *       ;trap
1c2b : 68                       pla         ;load status
                                eor_flag 0
                        
1c2e : cd0702                   cmp fLDx+2  ;test flags
1c31 : d0fe                     bne *       ;trap
                                set_stat 0
                        
1c37 : a40d                     ldy zp1+3
1c39 : 08                       php         ;test stores do not alter flags
1c3a : 98                       tya
1c3b : 49c3                     eor #$c3
1c3d : a8                       tay
1c3e : 28                       plp
1c3f : 8c3602                   sty abst+3
1c42 : 08                       php         ;flags after load/store sequence
1c43 : 49c3                     eor #$c3
1c45 : a8                       tay
1c46 : c000                     cpy #0      ;test result
1c48 : d0fe                     bne *       ;trap
1c4a : 68                       pla         ;load status
                                eor_flag 0
                        
1c4d : cd0802                   cmp fLDx+3  ;test flags
1c50 : d0fe                     bne *       ;trap
                        
                                set_stat $ff
                        
1c56 : a40a                     ldy zp1
1c58 : 08                       php         ;test stores do not alter flags
1c59 : 98                       tya
1c5a : 49c3                     eor #$c3
1c5c : a8                       tay
1c5d : 28                       plp
1c5e : 8c3302                   sty abst
1c61 : 08                       php         ;flags after load/store sequence
1c62 : 49c3                     eor #$c3
1c64 : a8                       tay
1c65 : c0c3                     cpy #$c3    ;test result
1c67 : d0fe                     bne *       ;trap
1c69 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1c6c : cd0502                   cmp fLDx    ;test flags
1c6f : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1c75 : a40b                     ldy zp1+1
1c77 : 08                       php         ;test stores do not alter flags
1c78 : 98                       tya
1c79 : 49c3                     eor #$c3
1c7b : a8                       tay
1c7c : 28                       plp
1c7d : 8c3402                   sty abst+1
1c80 : 08                       php         ;flags after load/store sequence
1c81 : 49c3                     eor #$c3
1c83 : a8                       tay
1c84 : c082                     cpy #$82   ;test result
1c86 : d0fe                     bne *       ;trap
1c88 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1c8b : cd0602                   cmp fLDx+1  ;test flags
1c8e : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1c94 : a40c                     ldy zp1+2
1c96 : 08                       php         ;test stores do not alter flags
1c97 : 98                       tya
1c98 : 49c3                     eor #$c3
1c9a : a8                       tay
1c9b : 28                       plp
1c9c : 8c3502                   sty abst+2
1c9f : 08                       php         ;flags after load/store sequence
1ca0 : 49c3                     eor #$c3
1ca2 : a8                       tay
1ca3 : c041                     cpy #$41    ;test result
1ca5 : d0fe                     bne *       ;trap
1ca7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1caa : cd0702                   cmp fLDx+2  ;test flags
1cad : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1cb3 : a40d                     ldy zp1+3
1cb5 : 08                       php         ;test stores do not alter flags
1cb6 : 98                       tya
1cb7 : 49c3                     eor #$c3
1cb9 : a8                       tay
1cba : 28                       plp
1cbb : 8c3602                   sty abst+3
1cbe : 08                       php         ;flags after load/store sequence
1cbf : 49c3                     eor #$c3
1cc1 : a8                       tay
1cc2 : c000                     cpy #0      ;test result
1cc4 : d0fe                     bne *       ;trap
1cc6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1cc9 : cd0802                   cmp fLDx+3  ;test flags
1ccc : d0fe                     bne *       ;trap
                        
                                set_stat 0
                        
1cd2 : ac0002                   ldy abs1
1cd5 : 08                       php         ;test stores do not alter flags
1cd6 : 98                       tya
1cd7 : 49c3                     eor #$c3
1cd9 : a8                       tay
1cda : 28                       plp
1cdb : 840f                     sty zpt
1cdd : 08                       php         ;flags after load/store sequence
1cde : 49c3                     eor #$c3
1ce0 : a8                       tay
1ce1 : c40a                     cpy zp1     ;test result
1ce3 : d0fe                     bne *       ;trap
1ce5 : 68                       pla         ;load status
                                eor_flag 0
                        
1ce8 : cd0502                   cmp fLDx    ;test flags
1ceb : d0fe                     bne *       ;trap
                                set_stat 0
                        
1cf1 : ac0102                   ldy abs1+1
1cf4 : 08                       php         ;test stores do not alter flags
1cf5 : 98                       tya
1cf6 : 49c3                     eor #$c3
1cf8 : a8                       tay
1cf9 : 28                       plp
1cfa : 8410                     sty zpt+1
1cfc : 08                       php         ;flags after load/store sequence
1cfd : 49c3                     eor #$c3
1cff : a8                       tay
1d00 : c40b                     cpy zp1+1   ;test result
1d02 : d0fe                     bne *       ;trap
1d04 : 68                       pla         ;load status
                                eor_flag 0
                        
1d07 : cd0602                   cmp fLDx+1  ;test flags
1d0a : d0fe                     bne *       ;trap
                                set_stat 0
                        
1d10 : ac0202                   ldy abs1+2
1d13 : 08                       php         ;test stores do not alter flags
1d14 : 98                       tya
1d15 : 49c3                     eor #$c3
1d17 : a8                       tay
1d18 : 28                       plp
1d19 : 8411                     sty zpt+2
1d1b : 08                       php         ;flags after load/store sequence
1d1c : 49c3                     eor #$c3
1d1e : a8                       tay
1d1f : c40c                     cpy zp1+2   ;test result
1d21 : d0fe                     bne *       ;trap
1d23 : 68                       pla         ;load status
                                eor_flag 0
                        
1d26 : cd0702                   cmp fLDx+2  ;test flags
1d29 : d0fe                     bne *       ;trap
                                set_stat 0
                        
1d2f : ac0302                   ldy abs1+3
1d32 : 08                       php         ;test stores do not alter flags
1d33 : 98                       tya
1d34 : 49c3                     eor #$c3
1d36 : a8                       tay
1d37 : 28                       plp
1d38 : 8412                     sty zpt+3
1d3a : 08                       php         ;flags after load/store sequence
1d3b : 49c3                     eor #$c3
1d3d : a8                       tay
1d3e : c40d                     cpy zp1+3   ;test result
1d40 : d0fe                     bne *       ;trap
1d42 : 68                       pla         ;load status
                                eor_flag 0
                        
1d45 : cd0802                   cmp fLDx+3  ;test flags
1d48 : d0fe                     bne *       ;trap
                        
                                set_stat $ff
                        
1d4e : ac0002                   ldy abs1
1d51 : 08                       php         ;test stores do not alter flags
1d52 : 98                       tya
1d53 : 49c3                     eor #$c3
1d55 : a8                       tay
1d56 : 28                       plp
1d57 : 840f                     sty zpt
1d59 : 08                       php         ;flags after load/store sequence
1d5a : 49c3                     eor #$c3
1d5c : a8                       tay
1d5d : c50a                     cmp zp1     ;test result
1d5f : d0fe                     bne *       ;trap
1d61 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1d64 : cd0502                   cmp fLDx    ;test flags
1d67 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1d6d : ac0102                   ldy abs1+1
1d70 : 08                       php         ;test stores do not alter flags
1d71 : 98                       tya
1d72 : 49c3                     eor #$c3
1d74 : a8                       tay
1d75 : 28                       plp
1d76 : 8410                     sty zpt+1
1d78 : 08                       php         ;flags after load/store sequence
1d79 : 49c3                     eor #$c3
1d7b : a8                       tay
1d7c : c50b                     cmp zp1+1   ;test result
1d7e : d0fe                     bne *       ;trap
1d80 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1d83 : cd0602                   cmp fLDx+1  ;test flags
1d86 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1d8c : ac0202                   ldy abs1+2
1d8f : 08                       php         ;test stores do not alter flags
1d90 : 98                       tya
1d91 : 49c3                     eor #$c3
1d93 : a8                       tay
1d94 : 28                       plp
1d95 : 8411                     sty zpt+2
1d97 : 08                       php         ;flags after load/store sequence
1d98 : 49c3                     eor #$c3
1d9a : a8                       tay
1d9b : c50c                     cmp zp1+2   ;test result
1d9d : d0fe                     bne *       ;trap
1d9f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1da2 : cd0702                   cmp fLDx+2  ;test flags
1da5 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1dab : ac0302                   ldy abs1+3
1dae : 08                       php         ;test stores do not alter flags
1daf : 98                       tya
1db0 : 49c3                     eor #$c3
1db2 : a8                       tay
1db3 : 28                       plp
1db4 : 8412                     sty zpt+3
1db6 : 08                       php         ;flags after load/store sequence
1db7 : 49c3                     eor #$c3
1db9 : a8                       tay
1dba : c50d                     cmp zp1+3   ;test result
1dbc : d0fe                     bne *       ;trap
1dbe : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1dc1 : cd0802                   cmp fLDx+3  ;test flags
1dc4 : d0fe                     bne *       ;trap
                        
                        
                                set_stat 0
                        
1dca : a0c3                     ldy #$c3
1dcc : 08                       php
1dcd : cc0002                   cpy abs1    ;test result
1dd0 : d0fe                     bne *       ;trap
1dd2 : 68                       pla         ;load status
                                eor_flag 0    ;always on bits
                        
1dd5 : cd0502                   cmp fLDx    ;test flags
1dd8 : d0fe                     bne *       ;trap
                                set_stat 0
                        
1dde : a082                     ldy #$82
1de0 : 08                       php
1de1 : cc0102                   cpy abs1+1  ;test result
1de4 : d0fe                     bne *       ;trap
1de6 : 68                       pla         ;load status
                                eor_flag 0
                        
1de9 : cd0602                   cmp fLDx+1  ;test flags
1dec : d0fe                     bne *       ;trap
                                set_stat 0
                        
1df2 : a041                     ldy #$41
1df4 : 08                       php
1df5 : cc0202                   cpy abs1+2  ;test result
1df8 : d0fe                     bne *       ;trap
1dfa : 68                       pla         ;load status
                                eor_flag 0
                        
1dfd : cd0702                   cmp fLDx+2  ;test flags
1e00 : d0fe                     bne *       ;trap
                                set_stat 0
                        
1e06 : a000                     ldy #0
1e08 : 08                       php
1e09 : cc0302                   cpy abs1+3  ;test result
1e0c : d0fe                     bne *       ;trap
1e0e : 68                       pla         ;load status
                                eor_flag 0
                        
1e11 : cd0802                   cmp fLDx+3  ;test flags
1e14 : d0fe                     bne *       ;trap
                        
                                set_stat $ff
                        
1e1a : a0c3                     ldy #$c3
1e1c : 08                       php
1e1d : cc0002                   cpy abs1     ;test result
1e20 : d0fe                     bne *       ;trap
1e22 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1e25 : cd0502                   cmp fLDx    ;test flags
1e28 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1e2e : a082                     ldy #$82
1e30 : 08                       php
1e31 : cc0102                   cpy abs1+1   ;test result
1e34 : d0fe                     bne *       ;trap
1e36 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1e39 : cd0602                   cmp fLDx+1  ;test flags
1e3c : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1e42 : a041                     ldy #$41
1e44 : 08                       php
1e45 : cc0202                   cpy abs1+2   ;test result
1e48 : d0fe                     bne *       ;trap
1e4a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1e4d : cd0702                   cmp fLDx+2  ;test flags
1e50 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
1e56 : a000                     ldy #0
1e58 : 08                       php
1e59 : cc0302                   cpy abs1+3   ;test result
1e5c : d0fe                     bne *       ;trap
1e5e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1e61 : cd0802                   cmp fLDx+3  ;test flags
1e64 : d0fe                     bne *       ;trap
                        
1e66 : a000                     ldy #0
1e68 : a50f                     lda zpt
1e6a : 49c3                     eor #$c3
1e6c : c50a                     cmp zp1
1e6e : d0fe                     bne *       ;trap: store to zp   data
1e70 : 840f                     sty zpt     ;clear
1e72 : ad3302                   lda abst
1e75 : 49c3                     eor #$c3
1e77 : cd0002                   cmp abs1
1e7a : d0fe                     bne *       ;trap: store to abs   data
1e7c : 8c3302                   sty abst    ;clear
1e7f : a510                     lda zpt+1
1e81 : 49c3                     eor #$c3
1e83 : c50b                     cmp zp1+1
1e85 : d0fe                     bne *       ;trap: store to zp+1 data
1e87 : 8410                     sty zpt+1   ;clear
1e89 : ad3402                   lda abst+1
1e8c : 49c3                     eor #$c3
1e8e : cd0102                   cmp abs1+1
1e91 : d0fe                     bne *       ;trap: store to abs+1 data
1e93 : 8c3402                   sty abst+1  ;clear
1e96 : a511                     lda zpt+2
1e98 : 49c3                     eor #$c3
1e9a : c50c                     cmp zp1+2
1e9c : d0fe                     bne *       ;trap: store to zp+2 data
1e9e : 8411                     sty zpt+2   ;clear
1ea0 : ad3502                   lda abst+2
1ea3 : 49c3                     eor #$c3
1ea5 : cd0202                   cmp abs1+2
1ea8 : d0fe                     bne *       ;trap: store to abs+2 data
1eaa : 8c3502                   sty abst+2  ;clear
1ead : a512                     lda zpt+3
1eaf : 49c3                     eor #$c3
1eb1 : c50d                     cmp zp1+3
1eb3 : d0fe                     bne *       ;trap: store to zp+3 data
1eb5 : 8412                     sty zpt+3   ;clear
1eb7 : ad3602                   lda abst+3
1eba : 49c3                     eor #$c3
1ebc : cd0302                   cmp abs1+3
1ebf : d0fe                     bne *       ;trap: store to abs+3 data
1ec1 : 8c3602                   sty abst+3  ;clear
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
1ec4 : a203                     ldx #3
1ec6 :                  tldax
                                set_stat 0
                        
1eca : b50a                     lda zp1,x
1ecc : 08                       php         ;test stores do not alter flags
1ecd : 49c3                     eor #$c3
1ecf : 28                       plp
1ed0 : 9d3302                   sta abst,x
1ed3 : 08                       php         ;flags after load/store sequence
1ed4 : 49c3                     eor #$c3
1ed6 : dd0002                   cmp abs1,x  ;test result
1ed9 : d0fe                     bne *       ;trap
1edb : 68                       pla         ;load status
                                eor_flag 0
                        
1ede : dd0502                   cmp fLDx,x  ;test flags
1ee1 : d0fe                     bne *       ;trap
1ee3 : ca                       dex
1ee4 : 10e0                     bpl tldax
                        
1ee6 : a203                     ldx #3
1ee8 :                  tldax1
                                set_stat $ff
                        
1eec : b50a                     lda zp1,x
1eee : 08                       php         ;test stores do not alter flags
1eef : 49c3                     eor #$c3
1ef1 : 28                       plp
1ef2 : 9d3302                   sta abst,x
1ef5 : 08                       php         ;flags after load/store sequence
1ef6 : 49c3                     eor #$c3
1ef8 : dd0002                   cmp abs1,x   ;test result
1efb : d0fe                     bne *       ;trap
1efd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1f00 : dd0502                   cmp fLDx,x  ;test flags
1f03 : d0fe                     bne *       ;trap
1f05 : ca                       dex
1f06 : 10e0                     bpl tldax1
                        
1f08 : a203                     ldx #3
1f0a :                  tldax2
                                set_stat 0
                        
1f0e : bd0002                   lda abs1,x
1f11 : 08                       php         ;test stores do not alter flags
1f12 : 49c3                     eor #$c3
1f14 : 28                       plp
1f15 : 950f                     sta zpt,x
1f17 : 08                       php         ;flags after load/store sequence
1f18 : 49c3                     eor #$c3
1f1a : d50a                     cmp zp1,x   ;test result
1f1c : d0fe                     bne *       ;trap
1f1e : 68                       pla         ;load status
                                eor_flag 0
                        
1f21 : dd0502                   cmp fLDx,x  ;test flags
1f24 : d0fe                     bne *       ;trap
1f26 : ca                       dex
1f27 : 10e1                     bpl tldax2
                        
1f29 : a203                     ldx #3
1f2b :                  tldax3
                                set_stat $ff
                        
1f2f : bd0002                   lda abs1,x
1f32 : 08                       php         ;test stores do not alter flags
1f33 : 49c3                     eor #$c3
1f35 : 28                       plp
1f36 : 950f                     sta zpt,x
1f38 : 08                       php         ;flags after load/store sequence
1f39 : 49c3                     eor #$c3
1f3b : d50a                     cmp zp1,x   ;test result
1f3d : d0fe                     bne *       ;trap
1f3f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1f42 : dd0502                   cmp fLDx,x  ;test flags
1f45 : d0fe                     bne *       ;trap
1f47 : ca                       dex
1f48 : 10e1                     bpl tldax3
                        
1f4a : a203                     ldx #3      ;testing store result
1f4c : a000                     ldy #0
1f4e : b50f             tstax   lda zpt,x
1f50 : 49c3                     eor #$c3
1f52 : d50a                     cmp zp1,x
1f54 : d0fe                     bne *       ;trap: store to zp,x data
1f56 : 940f                     sty zpt,x   ;clear
1f58 : bd3302                   lda abst,x
1f5b : 49c3                     eor #$c3
1f5d : dd0002                   cmp abs1,x
1f60 : d0fe                     bne *       ;trap: store to abs,x data
1f62 : 8a                       txa
1f63 : 9d3302                   sta abst,x  ;clear
1f66 : ca                       dex
1f67 : 10e5                     bpl tstax
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
1f69 : a003                     ldy #3
1f6b :                  tlday
                                set_stat 0
                        
1f6f : b120                     lda (ind1),y
1f71 : 08                       php         ;test stores do not alter flags
1f72 : 49c3                     eor #$c3
1f74 : 28                       plp
1f75 : 993302                   sta abst,y
1f78 : 08                       php         ;flags after load/store sequence
1f79 : 49c3                     eor #$c3
1f7b : d90002                   cmp abs1,y  ;test result
1f7e : d0fe                     bne *       ;trap
1f80 : 68                       pla         ;load status
                                eor_flag 0
                        
1f83 : d90502                   cmp fLDx,y  ;test flags
1f86 : d0fe                     bne *       ;trap
1f88 : 88                       dey
1f89 : 10e0                     bpl tlday
                        
1f8b : a003                     ldy #3
1f8d :                  tlday1
                                set_stat $ff
                        
1f91 : b120                     lda (ind1),y
1f93 : 08                       php         ;test stores do not alter flags
1f94 : 49c3                     eor #$c3
1f96 : 28                       plp
1f97 : 993302                   sta abst,y
1f9a : 08                       php         ;flags after load/store sequence
1f9b : 49c3                     eor #$c3
1f9d : d90002                   cmp abs1,y  ;test result
1fa0 : d0fe                     bne *       ;trap
1fa2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1fa5 : d90502                   cmp fLDx,y  ;test flags
1fa8 : d0fe                     bne *       ;trap
1faa : 88                       dey
1fab : 10e0                     bpl tlday1
                        
1fad : a003                     ldy #3      ;testing store result
1faf : a200                     ldx #0
1fb1 : b93302           tstay   lda abst,y
1fb4 : 49c3                     eor #$c3
1fb6 : d90002                   cmp abs1,y
1fb9 : d0fe                     bne *       ;trap: store to abs data
1fbb : 8a                       txa
1fbc : 993302                   sta abst,y  ;clear
1fbf : 88                       dey
1fc0 : 10ef                     bpl tstay
                        
1fc2 : a003                     ldy #3
1fc4 :                  tlday2
                                set_stat 0
                        
1fc8 : b90002                   lda abs1,y
1fcb : 08                       php         ;test stores do not alter flags
1fcc : 49c3                     eor #$c3
1fce : 28                       plp
1fcf : 912c                     sta (indt),y
1fd1 : 08                       php         ;flags after load/store sequence
1fd2 : 49c3                     eor #$c3
1fd4 : d120                     cmp (ind1),y   ;test result
1fd6 : d0fe                     bne *       ;trap
1fd8 : 68                       pla         ;load status
                                eor_flag $30    ;always on bits
                        
1fdb : d90502                   cmp fLDx,y  ;test flags
1fde : d0fe                     bne *       ;trap
1fe0 : 88                       dey
1fe1 : 10e1                     bpl tlday2
                        
1fe3 : a003                     ldy #3
1fe5 :                  tlday3
                                set_stat $ff
                        
1fe9 : b90002                   lda abs1,y
1fec : 08                       php         ;test stores do not alter flags
1fed : 49c3                     eor #$c3
1fef : 28                       plp
1ff0 : 912c                     sta (indt),y
1ff2 : 08                       php         ;flags after load/store sequence
1ff3 : 49c3                     eor #$c3
1ff5 : d120                     cmp (ind1),y   ;test result
1ff7 : d0fe                     bne *       ;trap
1ff9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1ffc : d90502                   cmp fLDx,y  ;test flags
1fff : d0fe                     bne *       ;trap
2001 : 88                       dey
2002 : 10e1                     bpl tlday3
                        
2004 : a003                     ldy #3      ;testing store result
2006 : a200                     ldx #0
2008 : b93302           tstay1  lda abst,y
200b : 49c3                     eor #$c3
200d : d90002                   cmp abs1,y
2010 : d0fe                     bne *       ;trap: store to abs data
2012 : 8a                       txa
2013 : 993302                   sta abst,y  ;clear
2016 : 88                       dey
2017 : 10ef                     bpl tstay1
                        
2019 : a206                     ldx #6
201b : a003                     ldy #3
201d :                  tldax4
                                set_stat 0
                        
2021 : a120                     lda (ind1,x)
2023 : 08                       php         ;test stores do not alter flags
2024 : 49c3                     eor #$c3
2026 : 28                       plp
2027 : 812c                     sta (indt,x)
2029 : 08                       php         ;flags after load/store sequence
202a : 49c3                     eor #$c3
202c : d90002                   cmp abs1,y  ;test result
202f : d0fe                     bne *       ;trap
2031 : 68                       pla         ;load status
                                eor_flag 0    ;always on bits
                        
2034 : d90502                   cmp fLDx,y  ;test flags
2037 : d0fe                     bne *       ;trap
2039 : ca                       dex
203a : ca                       dex
203b : 88                       dey
203c : 10df                     bpl tldax4
                        
203e : a206                     ldx #6
2040 : a003                     ldy #3
2042 :                  tldax5
                                set_stat $ff
                        
2046 : a120                     lda (ind1,x)
2048 : 08                       php         ;test stores do not alter flags
2049 : 49c3                     eor #$c3
204b : 28                       plp
204c : 812c                     sta (indt,x)
204e : 08                       php         ;flags after load/store sequence
204f : 49c3                     eor #$c3
2051 : d90002                   cmp abs1,y  ;test result
2054 : d0fe                     bne *       ;trap
2056 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2059 : d90502                   cmp fLDx,y  ;test flags
205c : d0fe                     bne *       ;trap
205e : ca                       dex
205f : ca                       dex
2060 : 88                       dey
2061 : 10df                     bpl tldax5
                        
2063 : a003                     ldy #3      ;testing store result
2065 : a200                     ldx #0
2067 : b93302           tstay2  lda abst,y
206a : 49c3                     eor #$c3
206c : d90002                   cmp abs1,y
206f : d0fe                     bne *       ;trap: store to abs data
2071 : 8a                       txa
2072 : 993302                   sta abst,y  ;clear
2075 : 88                       dey
2076 : 10ef                     bpl tstay2
                        
                        ; indexed wraparound test (only zp should wrap)
2078 : a2fd                     ldx #3+$fa
207a : b510             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
207c : 9d3901                   sta abst-$fa,x      ;no STX abs,x!
207f : ca                       dex
2080 : e0fa                     cpx #$fa
2082 : b0f6                     bcs tldax6
2084 : a2fd                     ldx #3+$fa
2086 : bd0601           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
2089 : 9515                     sta zpt-$fa&$ff,x
208b : ca                       dex
208c : e0fa                     cpx #$fa
208e : b0f6                     bcs tldax7
                        
2090 : a203                     ldx #3      ;testing wraparound result
2092 : a000                     ldy #0
2094 : b50f             tstax1  lda zpt,x
2096 : d50a                     cmp zp1,x
2098 : d0fe                     bne *       ;trap: store to zp,x data
209a : 940f                     sty zpt,x   ;clear
209c : bd3302                   lda abst,x
209f : dd0002                   cmp abs1,x
20a2 : d0fe                     bne *       ;trap: store to abs,x data
20a4 : 8a                       txa
20a5 : 9d3302                   sta abst,x  ;clear
20a8 : ca                       dex
20a9 : 10e9                     bpl tstax1
                        
20ab : a0fb                     ldy #3+$f8
20ad : a2fe                     ldx #6+$f8
20af : a128             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
20b1 : 993b01                   sta abst-$f8,y
20b4 : ca                       dex
20b5 : ca                       dex
20b6 : 88                       dey
20b7 : c0f8                     cpy #$f8
20b9 : b0f4                     bcs tlday4
20bb : a003                     ldy #3      ;testing wraparound result
20bd : a200                     ldx #0
20bf : b93302           tstay4  lda abst,y
20c2 : d90002                   cmp abs1,y
20c5 : d0fe                     bne *       ;trap: store to abs data
20c7 : 8a                       txa
20c8 : 993302                   sta abst,y  ;clear
20cb : 88                       dey
20cc : 10f1                     bpl tstay4
                        
20ce : a0fb                     ldy #3+$f8
20d0 : b90801           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
20d3 : 9134                     sta (inwt),y
20d5 : 88                       dey
20d6 : c0f8                     cpy #$f8
20d8 : b0f6                     bcs tlday5
20da : a003                     ldy #3      ;testing wraparound result
20dc : a200                     ldx #0
20de : b93302           tstay5  lda abst,y
20e1 : d90002                   cmp abs1,y
20e4 : d0fe                     bne *       ;trap: store to abs data
20e6 : 8a                       txa
20e7 : 993302                   sta abst,y  ;clear
20ea : 88                       dey
20eb : 10f1                     bpl tstay5
                        
20ed : a0fb                     ldy #3+$f8
20ef : a2fe                     ldx #6+$f8
20f1 : b12a             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed
20f3 : 8134                     sta (indt-$f8&$ff,x)
20f5 : ca                       dex
20f6 : ca                       dex
20f7 : 88                       dey
20f8 : c0f8                     cpy #$f8
20fa : b0f5                     bcs tlday6
20fc : a003                     ldy #3      ;testing wraparound result
20fe : a200                     ldx #0
2100 : b93302           tstay6  lda abst,y
2103 : d90002                   cmp abs1,y
2106 : d0fe                     bne *       ;trap: store to abs data
2108 : 8a                       txa
2109 : 993302                   sta abst,y  ;clear
210c : 88                       dey
210d : 10f1                     bpl tstay6
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0
                        
2113 : a50a                     lda zp1
2115 : 08                       php         ;test stores do not alter flags
2116 : 49c3                     eor #$c3
2118 : 28                       plp
2119 : 8d3302                   sta abst
211c : 08                       php         ;flags after load/store sequence
211d : 49c3                     eor #$c3
211f : c9c3                     cmp #$c3    ;test result
2121 : d0fe                     bne *       ;trap
2123 : 68                       pla         ;load status
                                eor_flag 0
                        
2126 : cd0502                   cmp fLDx    ;test flags
2129 : d0fe                     bne *       ;trap
                                set_stat 0
                        
212f : a50b                     lda zp1+1
2131 : 08                       php         ;test stores do not alter flags
2132 : 49c3                     eor #$c3
2134 : 28                       plp
2135 : 8d3402                   sta abst+1
2138 : 08                       php         ;flags after load/store sequence
2139 : 49c3                     eor #$c3
213b : c982                     cmp #$82    ;test result
213d : d0fe                     bne *       ;trap
213f : 68                       pla         ;load status
                                eor_flag 0
                        
2142 : cd0602                   cmp fLDx+1  ;test flags
2145 : d0fe                     bne *       ;trap
                                set_stat 0
                        
214b : a50c                     lda zp1+2
214d : 08                       php         ;test stores do not alter flags
214e : 49c3                     eor #$c3
2150 : 28                       plp
2151 : 8d3502                   sta abst+2
2154 : 08                       php         ;flags after load/store sequence
2155 : 49c3                     eor #$c3
2157 : c941                     cmp #$41    ;test result
2159 : d0fe                     bne *       ;trap
215b : 68                       pla         ;load status
                                eor_flag 0
                        
215e : cd0702                   cmp fLDx+2  ;test flags
2161 : d0fe                     bne *       ;trap
                                set_stat 0
                        
2167 : a50d                     lda zp1+3
2169 : 08                       php         ;test stores do not alter flags
216a : 49c3                     eor #$c3
216c : 28                       plp
216d : 8d3602                   sta abst+3
2170 : 08                       php         ;flags after load/store sequence
2171 : 49c3                     eor #$c3
2173 : c900                     cmp #0      ;test result
2175 : d0fe                     bne *       ;trap
2177 : 68                       pla         ;load status
                                eor_flag 0
                        
217a : cd0802                   cmp fLDx+3  ;test flags
217d : d0fe                     bne *       ;trap
                                set_stat $ff
                        
2183 : a50a                     lda zp1
2185 : 08                       php         ;test stores do not alter flags
2186 : 49c3                     eor #$c3
2188 : 28                       plp
2189 : 8d3302                   sta abst
218c : 08                       php         ;flags after load/store sequence
218d : 49c3                     eor #$c3
218f : c9c3                     cmp #$c3    ;test result
2191 : d0fe                     bne *       ;trap
2193 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2196 : cd0502                   cmp fLDx    ;test flags
2199 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
219f : a50b                     lda zp1+1
21a1 : 08                       php         ;test stores do not alter flags
21a2 : 49c3                     eor #$c3
21a4 : 28                       plp
21a5 : 8d3402                   sta abst+1
21a8 : 08                       php         ;flags after load/store sequence
21a9 : 49c3                     eor #$c3
21ab : c982                     cmp #$82    ;test result
21ad : d0fe                     bne *       ;trap
21af : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
21b2 : cd0602                   cmp fLDx+1  ;test flags
21b5 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
21bb : a50c                     lda zp1+2
21bd : 08                       php         ;test stores do not alter flags
21be : 49c3                     eor #$c3
21c0 : 28                       plp
21c1 : 8d3502                   sta abst+2
21c4 : 08                       php         ;flags after load/store sequence
21c5 : 49c3                     eor #$c3
21c7 : c941                     cmp #$41    ;test result
21c9 : d0fe                     bne *       ;trap
21cb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
21ce : cd0702                   cmp fLDx+2  ;test flags
21d1 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
21d7 : a50d                     lda zp1+3
21d9 : 08                       php         ;test stores do not alter flags
21da : 49c3                     eor #$c3
21dc : 28                       plp
21dd : 8d3602                   sta abst+3
21e0 : 08                       php         ;flags after load/store sequence
21e1 : 49c3                     eor #$c3
21e3 : c900                     cmp #0      ;test result
21e5 : d0fe                     bne *       ;trap
21e7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
21ea : cd0802                   cmp fLDx+3  ;test flags
21ed : d0fe                     bne *       ;trap
                                set_stat 0
                        
21f3 : ad0002                   lda abs1
21f6 : 08                       php         ;test stores do not alter flags
21f7 : 49c3                     eor #$c3
21f9 : 28                       plp
21fa : 850f                     sta zpt
21fc : 08                       php         ;flags after load/store sequence
21fd : 49c3                     eor #$c3
21ff : c50a                     cmp zp1     ;test result
2201 : d0fe                     bne *       ;trap
2203 : 68                       pla         ;load status
                                eor_flag 0
                        
2206 : cd0502                   cmp fLDx    ;test flags
2209 : d0fe                     bne *       ;trap
                                set_stat 0
                        
220f : ad0102                   lda abs1+1
2212 : 08                       php         ;test stores do not alter flags
2213 : 49c3                     eor #$c3
2215 : 28                       plp
2216 : 8510                     sta zpt+1
2218 : 08                       php         ;flags after load/store sequence
2219 : 49c3                     eor #$c3
221b : c50b                     cmp zp1+1   ;test result
221d : d0fe                     bne *       ;trap
221f : 68                       pla         ;load status
                                eor_flag 0
                        
2222 : cd0602                   cmp fLDx+1  ;test flags
2225 : d0fe                     bne *       ;trap
                                set_stat 0
                        
222b : ad0202                   lda abs1+2
222e : 08                       php         ;test stores do not alter flags
222f : 49c3                     eor #$c3
2231 : 28                       plp
2232 : 8511                     sta zpt+2
2234 : 08                       php         ;flags after load/store sequence
2235 : 49c3                     eor #$c3
2237 : c50c                     cmp zp1+2   ;test result
2239 : d0fe                     bne *       ;trap
223b : 68                       pla         ;load status
                                eor_flag 0
                        
223e : cd0702                   cmp fLDx+2  ;test flags
2241 : d0fe                     bne *       ;trap
                                set_stat 0
                        
2247 : ad0302                   lda abs1+3
224a : 08                       php         ;test stores do not alter flags
224b : 49c3                     eor #$c3
224d : 28                       plp
224e : 8512                     sta zpt+3
2250 : 08                       php         ;flags after load/store sequence
2251 : 49c3                     eor #$c3
2253 : c50d                     cmp zp1+3   ;test result
2255 : d0fe                     bne *       ;trap
2257 : 68                       pla         ;load status
                                eor_flag 0
                        
225a : cd0802                   cmp fLDx+3  ;test flags
225d : d0fe                     bne *       ;trap
                                set_stat $ff
                        
2263 : ad0002                   lda abs1
2266 : 08                       php         ;test stores do not alter flags
2267 : 49c3                     eor #$c3
2269 : 28                       plp
226a : 850f                     sta zpt
226c : 08                       php         ;flags after load/store sequence
226d : 49c3                     eor #$c3
226f : c50a                     cmp zp1     ;test result
2271 : d0fe                     bne *       ;trap
2273 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2276 : cd0502                   cmp fLDx    ;test flags
2279 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
227f : ad0102                   lda abs1+1
2282 : 08                       php         ;test stores do not alter flags
2283 : 49c3                     eor #$c3
2285 : 28                       plp
2286 : 8510                     sta zpt+1
2288 : 08                       php         ;flags after load/store sequence
2289 : 49c3                     eor #$c3
228b : c50b                     cmp zp1+1   ;test result
228d : d0fe                     bne *       ;trap
228f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2292 : cd0602                   cmp fLDx+1  ;test flags
2295 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
229b : ad0202                   lda abs1+2
229e : 08                       php         ;test stores do not alter flags
229f : 49c3                     eor #$c3
22a1 : 28                       plp
22a2 : 8511                     sta zpt+2
22a4 : 08                       php         ;flags after load/store sequence
22a5 : 49c3                     eor #$c3
22a7 : c50c                     cmp zp1+2   ;test result
22a9 : d0fe                     bne *       ;trap
22ab : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
22ae : cd0702                   cmp fLDx+2  ;test flags
22b1 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
22b7 : ad0302                   lda abs1+3
22ba : 08                       php         ;test stores do not alter flags
22bb : 49c3                     eor #$c3
22bd : 28                       plp
22be : 8512                     sta zpt+3
22c0 : 08                       php         ;flags after load/store sequence
22c1 : 49c3                     eor #$c3
22c3 : c50d                     cmp zp1+3   ;test result
22c5 : d0fe                     bne *       ;trap
22c7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
22ca : cd0802                   cmp fLDx+3  ;test flags
22cd : d0fe                     bne *       ;trap
                                set_stat 0
                        
22d3 : a9c3                     lda #$c3
22d5 : 08                       php
22d6 : cd0002                   cmp abs1    ;test result
22d9 : d0fe                     bne *       ;trap
22db : 68                       pla         ;load status
                                eor_flag 0
                        
22de : cd0502                   cmp fLDx    ;test flags
22e1 : d0fe                     bne *       ;trap
                                set_stat 0
                        
22e7 : a982                     lda #$82
22e9 : 08                       php
22ea : cd0102                   cmp abs1+1  ;test result
22ed : d0fe                     bne *       ;trap
22ef : 68                       pla         ;load status
                                eor_flag 0
                        
22f2 : cd0602                   cmp fLDx+1  ;test flags
22f5 : d0fe                     bne *       ;trap
                                set_stat 0
                        
22fb : a941                     lda #$41
22fd : 08                       php
22fe : cd0202                   cmp abs1+2  ;test result
2301 : d0fe                     bne *       ;trap
2303 : 68                       pla         ;load status
                                eor_flag 0
                        
2306 : cd0702                   cmp fLDx+2  ;test flags
2309 : d0fe                     bne *       ;trap
                                set_stat 0
                        
230f : a900                     lda #0
2311 : 08                       php
2312 : cd0302                   cmp abs1+3  ;test result
2315 : d0fe                     bne *       ;trap
2317 : 68                       pla         ;load status
                                eor_flag 0
                        
231a : cd0802                   cmp fLDx+3  ;test flags
231d : d0fe                     bne *       ;trap
                        
                                set_stat $ff
                        
2323 : a9c3                     lda #$c3
2325 : 08                       php
2326 : cd0002                   cmp abs1    ;test result
2329 : d0fe                     bne *       ;trap
232b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
232e : cd0502                   cmp fLDx    ;test flags
2331 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
2337 : a982                     lda #$82
2339 : 08                       php
233a : cd0102                   cmp abs1+1  ;test result
233d : d0fe                     bne *       ;trap
233f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2342 : cd0602                   cmp fLDx+1  ;test flags
2345 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
234b : a941                     lda #$41
234d : 08                       php
234e : cd0202                   cmp abs1+2  ;test result
2351 : d0fe                     bne *       ;trap
2353 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
2356 : cd0702                   cmp fLDx+2  ;test flags
2359 : d0fe                     bne *       ;trap
                                set_stat $ff
                        
235f : a900                     lda #0
2361 : 08                       php
2362 : cd0302                   cmp abs1+3  ;test result
2365 : d0fe                     bne *       ;trap
2367 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
236a : cd0802                   cmp fLDx+3  ;test flags
236d : d0fe                     bne *       ;trap
                        
236f : a200                     ldx #0
2371 : a50f                     lda zpt
2373 : 49c3                     eor #$c3
2375 : c50a                     cmp zp1
2377 : d0fe                     bne *       ;trap: store to zp data
2379 : 860f                     stx zpt     ;clear
237b : ad3302                   lda abst
237e : 49c3                     eor #$c3
2380 : cd0002                   cmp abs1
2383 : d0fe                     bne *       ;trap: store to abs data
2385 : 8e3302                   stx abst    ;clear
2388 : a510                     lda zpt+1
238a : 49c3                     eor #$c3
238c : c50b                     cmp zp1+1
238e : d0fe                     bne *       ;trap: store to zp data
2390 : 8610                     stx zpt+1   ;clear
2392 : ad3402                   lda abst+1
2395 : 49c3                     eor #$c3
2397 : cd0102                   cmp abs1+1
239a : d0fe                     bne *       ;trap: store to abs data
239c : 8e3402                   stx abst+1  ;clear
239f : a511                     lda zpt+2
23a1 : 49c3                     eor #$c3
23a3 : c50c                     cmp zp1+2
23a5 : d0fe                     bne *       ;trap: store to zp data
23a7 : 8611                     stx zpt+2   ;clear
23a9 : ad3502                   lda abst+2
23ac : 49c3                     eor #$c3
23ae : cd0202                   cmp abs1+2
23b1 : d0fe                     bne *       ;trap: store to abs data
23b3 : 8e3502                   stx abst+2  ;clear
23b6 : a512                     lda zpt+3
23b8 : 49c3                     eor #$c3
23ba : c50d                     cmp zp1+3
23bc : d0fe                     bne *       ;trap: store to zp data
23be : 8612                     stx zpt+3   ;clear
23c0 : ad3602                   lda abst+3
23c3 : 49c3                     eor #$c3
23c5 : cd0302                   cmp abs1+3
23c8 : d0fe                     bne *       ;trap: store to abs data
23ca : 8e3602                   stx abst+3  ;clear
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                        
23d3 : 240d                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz
                        
                                set_a 1,0
                        
23e7 : 240c                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
                                set_a 1,0
                        
23fb : 240b                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
                                set_a 1,0
                        
240f : 240a                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                        
                                set_a $ff,$ff
                        
2423 : 240d                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
                        
                                set_a 1,$ff
                        
2437 : 240c                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
                                set_a 1,$ff
                        
244b : 240b                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
                                set_a 1,$ff
                        
245f : 240a                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
                        
                                set_a $ff,0
                        
2473 : 2c0302                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz
                        
                                set_a 1,0
                        
2488 : 2c0202                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
                                set_a 1,0
                        
249d : 2c0102                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
                                set_a 1,0
                        
24b2 : 2c0002                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                        
                                set_a $ff,$ff
                        
24c7 : 2c0302                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
                        
                                set_a 1,$ff
                        
24dc : 2c0202                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
                                set_a 1,$ff
                        
24f1 : 2c0102                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
                                set_a 1,$ff
                        
2506 : 2c0002                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
                        
                        ; CPX - zp / abs / #
                                set_x $80,0
                        
251b : e40e                     cpx zp7f
                                tst_stat fc
                        
2525 : ca                       dex
2526 : e40e                     cpx zp7f
                                tst_stat fzc
                        
2530 : ca                       dex
2531 : e40e                     cpx zp7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
2545 : e40e                     cpx zp7f
                                tst_stat ~fnz
                        
254f : ca                       dex
2550 : e40e                     cpx zp7f
                                tst_stat ~fn
                        
255a : ca                       dex
255b : e40e                     cpx zp7f
                                tst_x $7e,~fzc
                        
                        
                                set_x $80,0
                        
256f : ec0402                   cpx abs7f
                                tst_stat fc
                        
257a : ca                       dex
257b : ec0402                   cpx abs7f
                                tst_stat fzc
                        
2586 : ca                       dex
2587 : ec0402                   cpx abs7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
259c : ec0402                   cpx abs7f
                                tst_stat ~fnz
                        
25a7 : ca                       dex
25a8 : ec0402                   cpx abs7f
                                tst_stat ~fn
                        
25b3 : ca                       dex
25b4 : ec0402                   cpx abs7f
                                tst_x $7e,~fzc
                        
                        
                                set_x $80,0
                        
25c9 : e07f                     cpx #$7f
                                tst_stat fc
                        
25d3 : ca                       dex
25d4 : e07f                     cpx #$7f
                                tst_stat fzc
                        
25de : ca                       dex
25df : e07f                     cpx #$7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
25f3 : e07f                     cpx #$7f
                                tst_stat ~fnz
                        
25fd : ca                       dex
25fe : e07f                     cpx #$7f
                                tst_stat ~fn
                        
2608 : ca                       dex
2609 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
                        
                        
                        ; CPY - zp / abs / #
                                set_y $80,0
                        
261d : c40e                     cpy zp7f
                                tst_stat fc
                        
2627 : 88                       dey
2628 : c40e                     cpy zp7f
                                tst_stat fzc
                        
2632 : 88                       dey
2633 : c40e                     cpy zp7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
2647 : c40e                     cpy zp7f
                                tst_stat ~fnz
                        
2651 : 88                       dey
2652 : c40e                     cpy zp7f
                                tst_stat ~fn
                        
265c : 88                       dey
265d : c40e                     cpy zp7f
                                tst_y $7e,~fzc
                        
                        
                                set_y $80,0
                        
2671 : cc0402                   cpy abs7f
                                tst_stat fc
                        
267c : 88                       dey
267d : cc0402                   cpy abs7f
                                tst_stat fzc
                        
2688 : 88                       dey
2689 : cc0402                   cpy abs7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
269e : cc0402                   cpy abs7f
                                tst_stat ~fnz
                        
26a9 : 88                       dey
26aa : cc0402                   cpy abs7f
                                tst_stat ~fn
                        
26b5 : 88                       dey
26b6 : cc0402                   cpy abs7f
                                tst_y $7e,~fzc
                        
                        
                                set_y $80,0
                        
26cb : c07f                     cpy #$7f
                                tst_stat fc
                        
26d5 : 88                       dey
26d6 : c07f                     cpy #$7f
                                tst_stat fzc
                        
26e0 : 88                       dey
26e1 : c07f                     cpy #$7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
26f5 : c07f                     cpy #$7f
                                tst_stat ~fnz
                        
26ff : 88                       dey
2700 : c07f                     cpy #$7f
                                tst_stat ~fn
                        
270a : 88                       dey
270b : c07f                     cpy #$7f
                                tst_y $7e,~fzc
                        
                        
                        ; CMP - zp / abs / #
                                set_a $80,0
                        
271f : c50e                     cmp zp7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
2733 : c50e                     cmp zp7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
2747 : c50e                     cmp zp7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
275b : c50e                     cmp zp7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
276f : c50e                     cmp zp7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
2783 : c50e                     cmp zp7f
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
2797 : cd0402                   cmp abs7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
27ac : cd0402                   cmp abs7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
27c1 : cd0402                   cmp abs7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
27d6 : cd0402                   cmp abs7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
27eb : cd0402                   cmp abs7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
2800 : cd0402                   cmp abs7f
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
2815 : c97f                     cmp #$7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
2829 : c97f                     cmp #$7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
283d : c97f                     cmp #$7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
2851 : c97f                     cmp #$7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
2865 : c97f                     cmp #$7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
2879 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
                        
                        
2887 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                        
288f : d50a                     cmp zp1,x
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
28a3 : d50a                     cmp zp1,x
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
28b7 : d50a                     cmp zp1,x
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
28cb : d50a                     cmp zp1,x
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
28df : d50a                     cmp zp1,x
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
28f3 : d50a                     cmp zp1,x
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
2907 : dd0002                   cmp abs1,x
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
291c : dd0002                   cmp abs1,x
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
2931 : dd0002                   cmp abs1,x
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
2946 : dd0002                   cmp abs1,x
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
295b : dd0002                   cmp abs1,x
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
2970 : dd0002                   cmp abs1,x
                                tst_a $7e,~fzc
                        
                        
297f : a004                     ldy #4          ;with indexing by Y
2981 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                        
2989 : d90002                   cmp abs1,y
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
299e : d90002                   cmp abs1,y
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
29b3 : d90002                   cmp abs1,y
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
29c8 : d90002                   cmp abs1,y
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
29dd : d90002                   cmp abs1,y
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
29f2 : d90002                   cmp abs1,y
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
2a07 : c120                     cmp (ind1,x)
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
2a1b : c120                     cmp (ind1,x)
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
2a2f : c120                     cmp (ind1,x)
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
2a43 : c120                     cmp (ind1,x)
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
2a57 : c120                     cmp (ind1,x)
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
2a6b : c120                     cmp (ind1,x)
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
2a7f : d120                     cmp (ind1),y
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
2a93 : d120                     cmp (ind1),y
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
2aa7 : d120                     cmp (ind1),y
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
2abb : d120                     cmp (ind1),y
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
2acf : d120                     cmp (ind1),y
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
2ae3 : d120                     cmp (ind1),y
                                tst_a $7e,~fzc
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
2af1 : a203                     ldx #3
2af3 :                  tasl
                                set_ax zp1,0
                        
2af9 : 0a                       asl a
                                tst_ax rASL,fASL,0
                        
2b08 : ca                       dex
2b09 : 10e8                     bpl tasl
2b0b : a203                     ldx #3
2b0d :                  tasl1
                                set_ax zp1,$ff
                        
2b13 : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
                        
2b22 : ca                       dex
2b23 : 10e8                     bpl tasl1
                        
2b25 : a203                     ldx #3
2b27 :                  tlsr
                                set_ax zp1,0
                        
2b2d : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
                        
2b3c : ca                       dex
2b3d : 10e8                     bpl tlsr
2b3f : a203                     ldx #3
2b41 :                  tlsr1
                                set_ax zp1,$ff
                        
2b47 : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
                        
2b56 : ca                       dex
2b57 : 10e8                     bpl tlsr1
                        
2b59 : a203                     ldx #3
2b5b :                  trol
                                set_ax zp1,0
                        
2b61 : 2a                       rol a
                                tst_ax rROL,fROL,0
                        
2b70 : ca                       dex
2b71 : 10e8                     bpl trol
2b73 : a203                     ldx #3
2b75 :                  trol1
                                set_ax zp1,$ff-fc
                        
2b7b : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
                        
2b8a : ca                       dex
2b8b : 10e8                     bpl trol1
                        
2b8d : a203                     ldx #3
2b8f :                  trolc
                                set_ax zp1,fc
                        
2b95 : 2a                       rol a
                                tst_ax rROLc,fROLc,0
                        
2ba4 : ca                       dex
2ba5 : 10e8                     bpl trolc
2ba7 : a203                     ldx #3
2ba9 :                  trolc1
                                set_ax zp1,$ff
                        
2baf : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
                        
2bbe : ca                       dex
2bbf : 10e8                     bpl trolc1
                        
2bc1 : a203                     ldx #3
2bc3 :                  tror
                                set_ax zp1,0
                        
2bc9 : 6a                       ror a
                                tst_ax rROR,fROR,0
                        
2bd8 : ca                       dex
2bd9 : 10e8                     bpl tror
2bdb : a203                     ldx #3
2bdd :                  tror1
                                set_ax zp1,$ff-fc
                        
2be3 : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
                        
2bf2 : ca                       dex
2bf3 : 10e8                     bpl tror1
                        
2bf5 : a203                     ldx #3
2bf7 :                  trorc
                                set_ax zp1,fc
                        
2bfd : 6a                       ror a
                                tst_ax rRORc,fRORc,0
                        
2c0c : ca                       dex
2c0d : 10e8                     bpl trorc
2c0f : a203                     ldx #3
2c11 :                  trorc1
                                set_ax zp1,$ff
                        
2c17 : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
                        
2c26 : ca                       dex
2c27 : 10e8                     bpl trorc1
                        
                        ; shifts - zeropage
2c29 : a203                     ldx #3
2c2b :                  tasl2
                                set_z zp1,0
                        
2c33 : 060f                     asl zpt
                                tst_z rASL,fASL,0
                        
2c45 : ca                       dex
2c46 : 10e3                     bpl tasl2
2c48 : a203                     ldx #3
2c4a :                  tasl3
                                set_z zp1,$ff
                        
2c52 : 060f                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
                        
2c64 : ca                       dex
2c65 : 10e3                     bpl tasl3
                        
2c67 : a203                     ldx #3
2c69 :                  tlsr2
                                set_z zp1,0
                        
2c71 : 460f                     lsr zpt
                                tst_z rLSR,fLSR,0
                        
2c83 : ca                       dex
2c84 : 10e3                     bpl tlsr2
2c86 : a203                     ldx #3
2c88 :                  tlsr3
                                set_z zp1,$ff
                        
2c90 : 460f                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
                        
2ca2 : ca                       dex
2ca3 : 10e3                     bpl tlsr3
                        
2ca5 : a203                     ldx #3
2ca7 :                  trol2
                                set_z zp1,0
                        
2caf : 260f                     rol zpt
                                tst_z rROL,fROL,0
                        
2cc1 : ca                       dex
2cc2 : 10e3                     bpl trol2
2cc4 : a203                     ldx #3
2cc6 :                  trol3
                                set_z zp1,$ff-fc
                        
2cce : 260f                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
                        
2ce0 : ca                       dex
2ce1 : 10e3                     bpl trol3
                        
2ce3 : a203                     ldx #3
2ce5 :                  trolc2
                                set_z zp1,fc
                        
2ced : 260f                     rol zpt
                                tst_z rROLc,fROLc,0
                        
2cff : ca                       dex
2d00 : 10e3                     bpl trolc2
2d02 : a203                     ldx #3
2d04 :                  trolc3
                                set_z zp1,$ff
                        
2d0c : 260f                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
                        
2d1e : ca                       dex
2d1f : 10e3                     bpl trolc3
                        
2d21 : a203                     ldx #3
2d23 :                  tror2
                                set_z zp1,0
                        
2d2b : 660f                     ror zpt
                                tst_z rROR,fROR,0
                        
2d3d : ca                       dex
2d3e : 10e3                     bpl tror2
2d40 : a203                     ldx #3
2d42 :                  tror3
                                set_z zp1,$ff-fc
                        
2d4a : 660f                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
                        
2d5c : ca                       dex
2d5d : 10e3                     bpl tror3
                        
2d5f : a203                     ldx #3
2d61 :                  trorc2
                                set_z zp1,fc
                        
2d69 : 660f                     ror zpt
                                tst_z rRORc,fRORc,0
                        
2d7b : ca                       dex
2d7c : 10e3                     bpl trorc2
2d7e : a203                     ldx #3
2d80 :                  trorc3
                                set_z zp1,$ff
                        
2d88 : 660f                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
                        
2d9a : ca                       dex
2d9b : 10e3                     bpl trorc3
                        
                        ; shifts - absolute
2d9d : a203                     ldx #3
2d9f :                  tasl4
                                set_abs zp1,0
                        
2da8 : 0e3302                   asl abst
                                tst_abs rASL,fASL,0
                        
2dbc : ca                       dex
2dbd : 10e0                     bpl tasl4
2dbf : a203                     ldx #3
2dc1 :                  tasl5
                                set_abs zp1,$ff
                        
2dca : 0e3302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
                        
2dde : ca                       dex
2ddf : 10e0                     bpl tasl5
                        
2de1 : a203                     ldx #3
2de3 :                  tlsr4
                                set_abs zp1,0
                        
2dec : 4e3302                   lsr abst
                                tst_abs rLSR,fLSR,0
                        
2e00 : ca                       dex
2e01 : 10e0                     bpl tlsr4
2e03 : a203                     ldx #3
2e05 :                  tlsr5
                                set_abs zp1,$ff
                        
2e0e : 4e3302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
                        
2e22 : ca                       dex
2e23 : 10e0                     bpl tlsr5
                        
2e25 : a203                     ldx #3
2e27 :                  trol4
                                set_abs zp1,0
                        
2e30 : 2e3302                   rol abst
                                tst_abs rROL,fROL,0
                        
2e44 : ca                       dex
2e45 : 10e0                     bpl trol4
2e47 : a203                     ldx #3
2e49 :                  trol5
                                set_abs zp1,$ff-fc
                        
2e52 : 2e3302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
                        
2e66 : ca                       dex
2e67 : 10e0                     bpl trol5
                        
2e69 : a203                     ldx #3
2e6b :                  trolc4
                                set_abs zp1,fc
                        
2e74 : 2e3302                   rol abst
                                tst_abs rROLc,fROLc,0
                        
2e88 : ca                       dex
2e89 : 10e0                     bpl trolc4
2e8b : a203                     ldx #3
2e8d :                  trolc5
                                set_abs zp1,$ff
                        
2e96 : 2e3302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
                        
2eaa : ca                       dex
2eab : 10e0                     bpl trolc5
                        
2ead : a203                     ldx #3
2eaf :                  tror4
                                set_abs zp1,0
                        
2eb8 : 6e3302                   ror abst
                                tst_abs rROR,fROR,0
                        
2ecc : ca                       dex
2ecd : 10e0                     bpl tror4
2ecf : a203                     ldx #3
2ed1 :                  tror5
                                set_abs zp1,$ff-fc
                        
2eda : 6e3302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
                        
2eee : ca                       dex
2eef : 10e0                     bpl tror5
                        
2ef1 : a203                     ldx #3
2ef3 :                  trorc4
                                set_abs zp1,fc
                        
2efc : 6e3302                   ror abst
                                tst_abs rRORc,fRORc,0
                        
2f10 : ca                       dex
2f11 : 10e0                     bpl trorc4
2f13 : a203                     ldx #3
2f15 :                  trorc5
                                set_abs zp1,$ff
                        
2f1e : 6e3302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
                        
2f32 : ca                       dex
2f33 : 10e0                     bpl trorc5
                        
                        ; shifts - zp indexed
2f35 : a203                     ldx #3
2f37 :                  tasl6
                                set_zx zp1,0
                        
2f3f : 160f                     asl zpt,x
                                tst_zx rASL,fASL,0
                        
2f51 : ca                       dex
2f52 : 10e3                     bpl tasl6
2f54 : a203                     ldx #3
2f56 :                  tasl7
                                set_zx zp1,$ff
                        
2f5e : 160f                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
                        
2f70 : ca                       dex
2f71 : 10e3                     bpl tasl7
                        
2f73 : a203                     ldx #3
2f75 :                  tlsr6
                                set_zx zp1,0
                        
2f7d : 560f                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
                        
2f8f : ca                       dex
2f90 : 10e3                     bpl tlsr6
2f92 : a203                     ldx #3
2f94 :                  tlsr7
                                set_zx zp1,$ff
                        
2f9c : 560f                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
                        
2fae : ca                       dex
2faf : 10e3                     bpl tlsr7
                        
2fb1 : a203                     ldx #3
2fb3 :                  trol6
                                set_zx zp1,0
                        
2fbb : 360f                     rol zpt,x
                                tst_zx rROL,fROL,0
                        
2fcd : ca                       dex
2fce : 10e3                     bpl trol6
2fd0 : a203                     ldx #3
2fd2 :                  trol7
                                set_zx zp1,$ff-fc
                        
2fda : 360f                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
                        
2fec : ca                       dex
2fed : 10e3                     bpl trol7
                        
2fef : a203                     ldx #3
2ff1 :                  trolc6
                                set_zx zp1,fc
                        
2ff9 : 360f                     rol zpt,x
                                tst_zx rROLc,fROLc,0
                        
300b : ca                       dex
300c : 10e3                     bpl trolc6
300e : a203                     ldx #3
3010 :                  trolc7
                                set_zx zp1,$ff
                        
3018 : 360f                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
                        
302a : ca                       dex
302b : 10e3                     bpl trolc7
                        
302d : a203                     ldx #3
302f :                  tror6
                                set_zx zp1,0
                        
3037 : 760f                     ror zpt,x
                                tst_zx rROR,fROR,0
                        
3049 : ca                       dex
304a : 10e3                     bpl tror6
304c : a203                     ldx #3
304e :                  tror7
                                set_zx zp1,$ff-fc
                        
3056 : 760f                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
                        
3068 : ca                       dex
3069 : 10e3                     bpl tror7
                        
306b : a203                     ldx #3
306d :                  trorc6
                                set_zx zp1,fc
                        
3075 : 760f                     ror zpt,x
                                tst_zx rRORc,fRORc,0
                        
3087 : ca                       dex
3088 : 10e3                     bpl trorc6
308a : a203                     ldx #3
308c :                  trorc7
                                set_zx zp1,$ff
                        
3094 : 760f                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
                        
30a6 : ca                       dex
30a7 : 10e3                     bpl trorc7
                        
                        ; shifts - abs indexed
30a9 : a203                     ldx #3
30ab :                  tasl8
                                set_absx zp1,0
                        
30b4 : 1e3302                   asl abst,x
                                tst_absx rASL,fASL,0
                        
30c8 : ca                       dex
30c9 : 10e0                     bpl tasl8
30cb : a203                     ldx #3
30cd :                  tasl9
                                set_absx zp1,$ff
                        
30d6 : 1e3302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
                        
30ea : ca                       dex
30eb : 10e0                     bpl tasl9
                        
30ed : a203                     ldx #3
30ef :                  tlsr8
                                set_absx zp1,0
                        
30f8 : 5e3302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
                        
310c : ca                       dex
310d : 10e0                     bpl tlsr8
310f : a203                     ldx #3
3111 :                  tlsr9
                                set_absx zp1,$ff
                        
311a : 5e3302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
                        
312e : ca                       dex
312f : 10e0                     bpl tlsr9
                        
3131 : a203                     ldx #3
3133 :                  trol8
                                set_absx zp1,0
                        
313c : 3e3302                   rol abst,x
                                tst_absx rROL,fROL,0
                        
3150 : ca                       dex
3151 : 10e0                     bpl trol8
3153 : a203                     ldx #3
3155 :                  trol9
                                set_absx zp1,$ff-fc
                        
315e : 3e3302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
                        
3172 : ca                       dex
3173 : 10e0                     bpl trol9
                        
3175 : a203                     ldx #3
3177 :                  trolc8
                                set_absx zp1,fc
                        
3180 : 3e3302                   rol abst,x
                                tst_absx rROLc,fROLc,0
                        
3194 : ca                       dex
3195 : 10e0                     bpl trolc8
3197 : a203                     ldx #3
3199 :                  trolc9
                                set_absx zp1,$ff
                        
31a2 : 3e3302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
                        
31b6 : ca                       dex
31b7 : 10e0                     bpl trolc9
                        
31b9 : a203                     ldx #3
31bb :                  tror8
                                set_absx zp1,0
                        
31c4 : 7e3302                   ror abst,x
                                tst_absx rROR,fROR,0
                        
31d8 : ca                       dex
31d9 : 10e0                     bpl tror8
31db : a203                     ldx #3
31dd :                  tror9
                                set_absx zp1,$ff-fc
                        
31e6 : 7e3302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
                        
31fa : ca                       dex
31fb : 10e0                     bpl tror9
                        
31fd : a203                     ldx #3
31ff :                  trorc8
                                set_absx zp1,fc
                        
3208 : 7e3302                   ror abst,x
                                tst_absx rRORc,fRORc,0
                        
321c : ca                       dex
321d : 10e0                     bpl trorc8
321f : a203                     ldx #3
3221 :                  trorc9
                                set_absx zp1,$ff
                        
322a : 7e3302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
                        
323e : ca                       dex
323f : 10e0                     bpl trorc9
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
3241 : a200                     ldx #0
3243 : a97e                     lda #$7e
3245 : 850f                     sta zpt
3247 :                  tinc
                                set_stat 0
                        
324b : e60f                     inc zpt
                                tst_z rINC,fINC,0
                        
325d : e8                       inx
325e : e002                     cpx #2
3260 : d004                     bne tinc1
3262 : a9fe                     lda #$fe
3264 : 850f                     sta zpt
3266 : e005             tinc1   cpx #5
3268 : d0dd                     bne tinc
326a : ca                       dex
326b : e60f                     inc zpt
326d :                  tdec
                                set_stat 0
                        
3271 : c60f                     dec zpt
                                tst_z rINC,fINC,0
                        
3283 : ca                       dex
3284 : 300a                     bmi tdec1
3286 : e001                     cpx #1
3288 : d0e3                     bne tdec
328a : a981                     lda #$81
328c : 850f                     sta zpt
328e : d0dd                     bne tdec
3290 :                  tdec1
3290 : a200                     ldx #0
3292 : a97e                     lda #$7e
3294 : 850f                     sta zpt
3296 :                  tinc10
                                set_stat $ff
                        
329a : e60f                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
                        
32ac : e8                       inx
32ad : e002                     cpx #2
32af : d004                     bne tinc11
32b1 : a9fe                     lda #$fe
32b3 : 850f                     sta zpt
32b5 : e005             tinc11  cpx #5
32b7 : d0dd                     bne tinc10
32b9 : ca                       dex
32ba : e60f                     inc zpt
32bc :                  tdec10
                                set_stat $ff
                        
32c0 : c60f                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
                        
32d2 : ca                       dex
32d3 : 300a                     bmi tdec11
32d5 : e001                     cpx #1
32d7 : d0e3                     bne tdec10
32d9 : a981                     lda #$81
32db : 850f                     sta zpt
32dd : d0dd                     bne tdec10
32df :                  tdec11
                        
                        ; absolute memory
32df : a200                     ldx #0
32e1 : a97e                     lda #$7e
32e3 : 8d3302                   sta abst
32e6 :                  tinc2
                                set_stat 0
                        
32ea : ee3302                   inc abst
                                tst_abs rINC,fINC,0
                        
32fe : e8                       inx
32ff : e002                     cpx #2
3301 : d005                     bne tinc3
3303 : a9fe                     lda #$fe
3305 : 8d3302                   sta abst
3308 : e005             tinc3   cpx #5
330a : d0da                     bne tinc2
330c : ca                       dex
330d : ee3302                   inc abst
3310 :                  tdec2
                                set_stat 0
                        
3314 : ce3302                   dec abst
                                tst_abs rINC,fINC,0
                        
3328 : ca                       dex
3329 : 300b                     bmi tdec3
332b : e001                     cpx #1
332d : d0e1                     bne tdec2
332f : a981                     lda #$81
3331 : 8d3302                   sta abst
3334 : d0da                     bne tdec2
3336 :                  tdec3
3336 : a200                     ldx #0
3338 : a97e                     lda #$7e
333a : 8d3302                   sta abst
333d :                  tinc12
                                set_stat $ff
                        
3341 : ee3302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
                        
3355 : e8                       inx
3356 : e002                     cpx #2
3358 : d005                     bne tinc13
335a : a9fe                     lda #$fe
335c : 8d3302                   sta abst
335f : e005             tinc13   cpx #5
3361 : d0da                     bne tinc12
3363 : ca                       dex
3364 : ee3302                   inc abst
3367 :                  tdec12
                                set_stat $ff
                        
336b : ce3302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
                        
337f : ca                       dex
3380 : 300b                     bmi tdec13
3382 : e001                     cpx #1
3384 : d0e1                     bne tdec12
3386 : a981                     lda #$81
3388 : 8d3302                   sta abst
338b : d0da                     bne tdec12
338d :                  tdec13
                        
                        ; zeropage indexed
338d : a200                     ldx #0
338f : a97e                     lda #$7e
3391 : 950f             tinc4   sta zpt,x
                                set_stat 0
                        
3397 : f60f                     inc zpt,x
                                tst_zx rINC,fINC,0
                        
33a9 : b50f                     lda zpt,x
33ab : e8                       inx
33ac : e002                     cpx #2
33ae : d002                     bne tinc5
33b0 : a9fe                     lda #$fe
33b2 : e005             tinc5   cpx #5
33b4 : d0db                     bne tinc4
33b6 : ca                       dex
33b7 : a902                     lda #2
33b9 : 950f             tdec4   sta zpt,x
                                set_stat 0
                        
33bf : d60f                     dec zpt,x
                                tst_zx rINC,fINC,0
                        
33d1 : b50f                     lda zpt,x
33d3 : ca                       dex
33d4 : 3008                     bmi tdec5
33d6 : e001                     cpx #1
33d8 : d0df                     bne tdec4
33da : a981                     lda #$81
33dc : d0db                     bne tdec4
33de :                  tdec5
33de : a200                     ldx #0
33e0 : a97e                     lda #$7e
33e2 : 950f             tinc14  sta zpt,x
                                set_stat $ff
                        
33e8 : f60f                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
                        
33fa : b50f                     lda zpt,x
33fc : e8                       inx
33fd : e002                     cpx #2
33ff : d002                     bne tinc15
3401 : a9fe                     lda #$fe
3403 : e005             tinc15  cpx #5
3405 : d0db                     bne tinc14
3407 : ca                       dex
3408 : a902                     lda #2
340a : 950f             tdec14  sta zpt,x
                                set_stat $ff
                        
3410 : d60f                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
                        
3422 : b50f                     lda zpt,x
3424 : ca                       dex
3425 : 3008                     bmi tdec15
3427 : e001                     cpx #1
3429 : d0df                     bne tdec14
342b : a981                     lda #$81
342d : d0db                     bne tdec14
342f :                  tdec15
                        
                        ; memory indexed
342f : a200                     ldx #0
3431 : a97e                     lda #$7e
3433 : 9d3302           tinc6   sta abst,x
                                set_stat 0
                        
343a : fe3302                   inc abst,x
                                tst_absx rINC,fINC,0
                        
344e : bd3302                   lda abst,x
3451 : e8                       inx
3452 : e002                     cpx #2
3454 : d002                     bne tinc7
3456 : a9fe                     lda #$fe
3458 : e005             tinc7   cpx #5
345a : d0d7                     bne tinc6
345c : ca                       dex
345d : a902                     lda #2
345f : 9d3302           tdec6   sta abst,x
                                set_stat 0
                        
3466 : de3302                   dec abst,x
                                tst_absx rINC,fINC,0
                        
347a : bd3302                   lda abst,x
347d : ca                       dex
347e : 3008                     bmi tdec7
3480 : e001                     cpx #1
3482 : d0db                     bne tdec6
3484 : a981                     lda #$81
3486 : d0d7                     bne tdec6
3488 :                  tdec7
3488 : a200                     ldx #0
348a : a97e                     lda #$7e
348c : 9d3302           tinc16  sta abst,x
                                set_stat $ff
                        
3493 : fe3302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
                        
34a7 : bd3302                   lda abst,x
34aa : e8                       inx
34ab : e002                     cpx #2
34ad : d002                     bne tinc17
34af : a9fe                     lda #$fe
34b1 : e005             tinc17  cpx #5
34b3 : d0d7                     bne tinc16
34b5 : ca                       dex
34b6 : a902                     lda #2
34b8 : 9d3302           tdec16  sta abst,x
                                set_stat $ff
                        
34bf : de3302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
                        
34d3 : bd3302                   lda abst,x
34d6 : ca                       dex
34d7 : 3008                     bmi tdec17
34d9 : e001                     cpx #1
34db : d0db                     bne tdec16
34dd : a981                     lda #$81
34df : d0d7                     bne tdec16
34e1 :                  tdec17
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
34e1 : a203                     ldx #3      ;immediate - self modifying code
34e3 : b518             tand    lda zpAN,x
34e5 : 8df034                   sta tandi1
                                set_ax  absANa,0
                        
34f0 =                  tandi1  equ *+1     ;target for immediate operand
34ef : 2963                     and #99
                                tst_ax  absrlo,absflo,0
                        
34ff : ca                       dex
3500 : 10e1                     bpl tand
3502 : a203                     ldx #3
3504 : b518             tand1   lda zpAN,x
3506 : 8d1135                   sta tandi2
                                set_ax  absANa,$ff
                        
3511 =                  tandi2  equ *+1     ;target for immediate operand
3510 : 2963                     and #99
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3520 : ca                       dex
3521 : 10e1                     bpl tand1
                        
3523 : a203                     ldx #3      ;zp
3525 : b518             tand2    lda zpAN,x
3527 : 850f                     sta zpt
                                set_ax  absANa,0
                        
3530 : 250f                     and zpt
                                tst_ax  absrlo,absflo,0
                        
3540 : ca                       dex
3541 : 10e2                     bpl tand2
3543 : a203                     ldx #3
3545 : b518             tand3   lda zpAN,x
3547 : 850f                     sta zpt
                                set_ax  absANa,$ff
                        
3550 : 250f                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3560 : ca                       dex
3561 : 10e2                     bpl tand3
                        
3563 : a203                     ldx #3      ;abs
3565 : b518             tand4   lda zpAN,x
3567 : 8d3302                   sta abst
                                set_ax  absANa,0
                        
3571 : 2d3302                   and abst
                                tst_ax  absrlo,absflo,0
                        
3582 : ca                       dex
3583 : 10e0                     bpl tand4
3585 : a203                     ldx #3
3587 : b518             tand5   lda zpAN,x
3589 : 8d3302                   sta abst
                                set_ax  absANa,$ff
                        
3593 : 2d3302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
35a4 : ca                       dex
35a5 : 1002                     bpl tand6
                        
35a7 : a203                     ldx #3      ;zp,x
35a9 :                  tand6
                                set_ax  absANa,0
                        
35b0 : 3518                     and zpAN,x
                                tst_ax  absrlo,absflo,0
                        
35c0 : ca                       dex
35c1 : 10e6                     bpl tand6
35c3 : a203                     ldx #3
35c5 :                  tand7
                                set_ax  absANa,$ff
                        
35cc : 3518                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
35dc : ca                       dex
35dd : 10e6                     bpl tand7
                        
35df : a203                     ldx #3      ;abs,x
35e1 :                  tand8
                                set_ax  absANa,0
                        
35e8 : 3d3c02                   and absAN,x
                                tst_ax  absrlo,absflo,0
                        
35f9 : ca                       dex
35fa : 10e5                     bpl tand8
35fc : a203                     ldx #3
35fe :                  tand9
                                set_ax  absANa,$ff
                        
3605 : 3d3c02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3616 : ca                       dex
3617 : 10e5                     bpl tand9
                        
3619 : a003                     ldy #3      ;abs,y
361b :                  tand10
                                set_ay  absANa,0
                        
3622 : 393c02                   and absAN,y
                                tst_ay  absrlo,absflo,0
                        
3633 : 88                       dey
3634 : 10e5                     bpl tand10
3636 : a003                     ldy #3
3638 :                  tand11
                                set_ay  absANa,$ff
                        
363f : 393c02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
3650 : 88                       dey
3651 : 10e5                     bpl tand11
                        
3653 : a206                     ldx #6      ;(zp,x)
3655 : a003                     ldy #3
3657 :                  tand12
                                set_ay  absANa,0
                        
365e : 2136                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
                        
366e : ca                       dex
366f : ca                       dex
3670 : 88                       dey
3671 : 10e4                     bpl tand12
3673 : a206                     ldx #6
3675 : a003                     ldy #3
3677 :                  tand13
                                set_ay  absANa,$ff
                        
367e : 2136                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
368e : ca                       dex
368f : ca                       dex
3690 : 88                       dey
3691 : 10e4                     bpl tand13
                        
3693 : a003                     ldy #3      ;(zp),y
3695 :                  tand14
                                set_ay  absANa,0
                        
369c : 3136                     and (indAN),y
                                tst_ay  absrlo,absflo,0
                        
36ac : 88                       dey
36ad : 10e6                     bpl tand14
36af : a003                     ldy #3
36b1 :                  tand15
                                set_ay  absANa,$ff
                        
36b8 : 3136                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
36c8 : 88                       dey
36c9 : 10e6                     bpl tand15
                        
                        ; EOR
36cb : a203                     ldx #3      ;immediate - self modifying code
36cd : b51c             teor    lda zpEO,x
36cf : 8dda36                   sta teori1
                                set_ax  absEOa,0
                        
36da =                  teori1  equ *+1     ;target for immediate opereor
36d9 : 4963                     eor #99
                                tst_ax  absrlo,absflo,0
                        
36e9 : ca                       dex
36ea : 10e1                     bpl teor
36ec : a203                     ldx #3
36ee : b51c             teor1   lda zpEO,x
36f0 : 8dfb36                   sta teori2
                                set_ax  absEOa,$ff
                        
36fb =                  teori2  equ *+1     ;target for immediate opereor
36fa : 4963                     eor #99
                                tst_ax  absrlo,absflo,$ff-fnz
                        
370a : ca                       dex
370b : 10e1                     bpl teor1
                        
370d : a203                     ldx #3      ;zp
370f : b51c             teor2    lda zpEO,x
3711 : 850f                     sta zpt
                                set_ax  absEOa,0
                        
371a : 450f                     eor zpt
                                tst_ax  absrlo,absflo,0
                        
372a : ca                       dex
372b : 10e2                     bpl teor2
372d : a203                     ldx #3
372f : b51c             teor3   lda zpEO,x
3731 : 850f                     sta zpt
                                set_ax  absEOa,$ff
                        
373a : 450f                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
374a : ca                       dex
374b : 10e2                     bpl teor3
                        
374d : a203                     ldx #3      ;abs
374f : b51c             teor4   lda zpEO,x
3751 : 8d3302                   sta abst
                                set_ax  absEOa,0
                        
375b : 4d3302                   eor abst
                                tst_ax  absrlo,absflo,0
                        
376c : ca                       dex
376d : 10e0                     bpl teor4
376f : a203                     ldx #3
3771 : b51c             teor5   lda zpEO,x
3773 : 8d3302                   sta abst
                                set_ax  absEOa,$ff
                        
377d : 4d3302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
378e : ca                       dex
378f : 1002                     bpl teor6
                        
3791 : a203                     ldx #3      ;zp,x
3793 :                  teor6
                                set_ax  absEOa,0
                        
379a : 551c                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
                        
37aa : ca                       dex
37ab : 10e6                     bpl teor6
37ad : a203                     ldx #3
37af :                  teor7
                                set_ax  absEOa,$ff
                        
37b6 : 551c                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
37c6 : ca                       dex
37c7 : 10e6                     bpl teor7
                        
37c9 : a203                     ldx #3      ;abs,x
37cb :                  teor8
                                set_ax  absEOa,0
                        
37d2 : 5d4002                   eor absEO,x
                                tst_ax  absrlo,absflo,0
                        
37e3 : ca                       dex
37e4 : 10e5                     bpl teor8
37e6 : a203                     ldx #3
37e8 :                  teor9
                                set_ax  absEOa,$ff
                        
37ef : 5d4002                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3800 : ca                       dex
3801 : 10e5                     bpl teor9
                        
3803 : a003                     ldy #3      ;abs,y
3805 :                  teor10
                                set_ay  absEOa,0
                        
380c : 594002                   eor absEO,y
                                tst_ay  absrlo,absflo,0
                        
381d : 88                       dey
381e : 10e5                     bpl teor10
3820 : a003                     ldy #3
3822 :                  teor11
                                set_ay  absEOa,$ff
                        
3829 : 594002                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
383a : 88                       dey
383b : 10e5                     bpl teor11
                        
383d : a206                     ldx #6      ;(zp,x)
383f : a003                     ldy #3
3841 :                  teor12
                                set_ay  absEOa,0
                        
3848 : 413e                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
                        
3858 : ca                       dex
3859 : ca                       dex
385a : 88                       dey
385b : 10e4                     bpl teor12
385d : a206                     ldx #6
385f : a003                     ldy #3
3861 :                  teor13
                                set_ay  absEOa,$ff
                        
3868 : 413e                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
3878 : ca                       dex
3879 : ca                       dex
387a : 88                       dey
387b : 10e4                     bpl teor13
                        
387d : a003                     ldy #3      ;(zp),y
387f :                  teor14
                                set_ay  absEOa,0
                        
3886 : 513e                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
                        
3896 : 88                       dey
3897 : 10e6                     bpl teor14
3899 : a003                     ldy #3
389b :                  teor15
                                set_ay  absEOa,$ff
                        
38a2 : 513e                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
38b2 : 88                       dey
38b3 : 10e6                     bpl teor15
                        
                        ; OR
38b5 : a203                     ldx #3      ;immediate - self modifying code
38b7 : b514             tora    lda zpOR,x
38b9 : 8dc438                   sta torai1
                                set_ax  absORa,0
                        
38c4 =                  torai1  equ *+1     ;target for immediate operora
38c3 : 0963                     ora #99
                                tst_ax  absrlo,absflo,0
                        
38d3 : ca                       dex
38d4 : 10e1                     bpl tora
38d6 : a203                     ldx #3
38d8 : b514             tora1   lda zpOR,x
38da : 8de538                   sta torai2
                                set_ax  absORa,$ff
                        
38e5 =                  torai2  equ *+1     ;target for immediate operora
38e4 : 0963                     ora #99
                                tst_ax  absrlo,absflo,$ff-fnz
                        
38f4 : ca                       dex
38f5 : 10e1                     bpl tora1
                        
38f7 : a203                     ldx #3      ;zp
38f9 : b514             tora2    lda zpOR,x
38fb : 850f                     sta zpt
                                set_ax  absORa,0
                        
3904 : 050f                     ora zpt
                                tst_ax  absrlo,absflo,0
                        
3914 : ca                       dex
3915 : 10e2                     bpl tora2
3917 : a203                     ldx #3
3919 : b514             tora3   lda zpOR,x
391b : 850f                     sta zpt
                                set_ax  absORa,$ff
                        
3924 : 050f                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3934 : ca                       dex
3935 : 10e2                     bpl tora3
                        
3937 : a203                     ldx #3      ;abs
3939 : b514             tora4   lda zpOR,x
393b : 8d3302                   sta abst
                                set_ax  absORa,0
                        
3945 : 0d3302                   ora abst
                                tst_ax  absrlo,absflo,0
                        
3956 : ca                       dex
3957 : 10e0                     bpl tora4
3959 : a203                     ldx #3
395b : b514             tora5   lda zpOR,x
395d : 8d3302                   sta abst
                                set_ax  absORa,$ff
                        
3967 : 0d3302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3978 : ca                       dex
3979 : 1002                     bpl tora6
                        
397b : a203                     ldx #3      ;zp,x
397d :                  tora6
                                set_ax  absORa,0
                        
3984 : 1514                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
                        
3994 : ca                       dex
3995 : 10e6                     bpl tora6
3997 : a203                     ldx #3
3999 :                  tora7
                                set_ax  absORa,$ff
                        
39a0 : 1514                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
39b0 : ca                       dex
39b1 : 10e6                     bpl tora7
                        
39b3 : a203                     ldx #3      ;abs,x
39b5 :                  tora8
                                set_ax  absORa,0
                        
39bc : 1d3802                   ora absOR,x
                                tst_ax  absrlo,absflo,0
                        
39cd : ca                       dex
39ce : 10e5                     bpl tora8
39d0 : a203                     ldx #3
39d2 :                  tora9
                                set_ax  absORa,$ff
                        
39d9 : 1d3802                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
39ea : ca                       dex
39eb : 10e5                     bpl tora9
                        
39ed : a003                     ldy #3      ;abs,y
39ef :                  tora10
                                set_ay  absORa,0
                        
39f6 : 193802                   ora absOR,y
                                tst_ay  absrlo,absflo,0
                        
3a07 : 88                       dey
3a08 : 10e5                     bpl tora10
3a0a : a003                     ldy #3
3a0c :                  tora11
                                set_ay  absORa,$ff
                        
3a13 : 193802                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
3a24 : 88                       dey
3a25 : 10e5                     bpl tora11
                        
3a27 : a206                     ldx #6      ;(zp,x)
3a29 : a003                     ldy #3
3a2b :                  tora12
                                set_ay  absORa,0
                        
3a32 : 0146                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
                        
3a42 : ca                       dex
3a43 : ca                       dex
3a44 : 88                       dey
3a45 : 10e4                     bpl tora12
3a47 : a206                     ldx #6
3a49 : a003                     ldy #3
3a4b :                  tora13
                                set_ay  absORa,$ff
                        
3a52 : 0146                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
3a62 : ca                       dex
3a63 : ca                       dex
3a64 : 88                       dey
3a65 : 10e4                     bpl tora13
                        
3a67 : a003                     ldy #3      ;(zp),y
3a69 :                  tora14
                                set_ay  absORa,0
                        
3a70 : 1146                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
                        
3a80 : 88                       dey
3a81 : 10e6                     bpl tora14
3a83 : a003                     ldy #3
3a85 :                  tora15
                                set_ay  absORa,$ff
                        
3a8c : 1146                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
3a9c : 88                       dey
3a9d : 10e6                     bpl tora15
                            if I_flag = 3
                                cli
                            endif
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3a9f : d8                       cld
                        ;        sei
3aa0 : a258                     ldx #ad2        ;for indexed test
3aa2 : a0ff                     ldy #$ff        ;max range
3aa4 : a900                     lda #0          ;start with adding zeroes & no carry
3aa6 : 8556                     sta adfc        ;carry in - for diag
3aa8 : 8557                     sta ad1         ;operand 1 - accumulator
3aaa : 8558                     sta ad2         ;operand 2 - memory or immediate
3aac : 8d5802                   sta ada2        ;non zp
3aaf : 8559                     sta adrl        ;expected result bits 0-7
3ab1 : 855a                     sta adrh        ;expected result bit 8 (carry out)
3ab3 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
3ab5 : 855c                     sta sb2
3ab7 : 8d5902                   sta sba2        ;non zp
3aba : a902                     lda #2          ;expected Z-flag
3abc : 855b                     sta adrf
3abe : 18               tadd    clc             ;test with carry clear
3abf : 20c53c                   jsr chkadd
3ac2 : e656                     inc adfc        ;now with carry
3ac4 : e659                     inc adrl        ;result +1
3ac6 : 08                       php             ;save N & Z from low result
3ac7 : 08                       php
3ac8 : 68                       pla             ;accu holds expected flags
3ac9 : 2982                     and #$82        ;mask N & Z
3acb : 28                       plp
3acc : d002                     bne tadd1
3ace : e65a                     inc adrh        ;result bit 8 - carry
3ad0 : 055a             tadd1   ora adrh        ;merge C to expected flags
3ad2 : 855b                     sta adrf        ;save expected flags except overflow
3ad4 : 38                       sec             ;test with carry set
3ad5 : 20c53c                   jsr chkadd
3ad8 : c656                     dec adfc        ;same for operand +1 but no carry
3ada : e657                     inc ad1
3adc : d0e0                     bne tadd        ;iterate op1
3ade : a900                     lda #0          ;preset result to op2 when op1 = 0
3ae0 : 855a                     sta adrh
3ae2 : ee5802                   inc ada2
3ae5 : e658                     inc ad2
3ae7 : 08                       php             ;save NZ as operand 2 becomes the new result
3ae8 : 68                       pla
3ae9 : 2982                     and #$82        ;mask N00000Z0
3aeb : 855b                     sta adrf        ;no need to check carry as we are adding to 0
3aed : c65c                     dec sb2         ;complement subtract operand 2
3aef : ce5902                   dec sba2
3af2 : a558                     lda ad2
3af4 : 8559                     sta adrl
3af6 : d0c6                     bne tadd        ;iterate op2
                        
                         if testingdecimal=1
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
3af8 : f8                       sed
                        ;        sei
3af9 : a258                     ldx #ad2        ;for indexed test
3afb : a0ff                     ldy #$ff        ;max range
3afd : a999                     lda #$99        ;start with adding 99 to 99 with carry
3aff : 8557                     sta ad1         ;operand 1 - accumulator
3b01 : 8558                     sta ad2         ;operand 2 - memory or immediate
3b03 : 8d5802                   sta ada2        ;non zp
3b06 : 8559                     sta adrl        ;expected result bits 0-7
3b08 : a901                     lda #1          ;set carry in & out
3b0a : 8556                     sta adfc        ;carry in - for diag
3b0c : 855a                     sta adrh        ;expected result bit 8 (carry out)
3b0e : a900                     lda #0          ;complemented operand 2 for subtract
3b10 : 855c                     sta sb2
3b12 : 8d5902                   sta sba2        ;non zp
3b15 : 38               tdad    sec             ;test with carry set
3b16 : 20943b                   jsr chkdad
3b19 : c656                     dec adfc        ;now with carry clear
3b1b : a559                     lda adrl        ;decimal adjust result
3b1d : d008                     bne tdad1       ;skip clear carry & preset result 99 (9A-1)
3b1f : c65a                     dec adrh
3b21 : a999                     lda #$99
3b23 : 8559                     sta adrl
3b25 : d012                     bne tdad3
3b27 : 290f             tdad1   and #$f         ;lower nibble mask
3b29 : d00c                     bne tdad2       ;no decimal adjust needed
3b2b : c659                     dec adrl        ;decimal adjust (?0-6)
3b2d : c659                     dec adrl
3b2f : c659                     dec adrl
3b31 : c659                     dec adrl
3b33 : c659                     dec adrl
3b35 : c659                     dec adrl
3b37 : c659             tdad2   dec adrl        ;result -1
3b39 : 18               tdad3   clc             ;test with carry clear
3b3a : 20943b                   jsr chkdad
3b3d : e656                     inc adfc        ;same for operand -1 but with carry
3b3f : a557                     lda ad1         ;decimal adjust operand 1
3b41 : f015                     beq tdad5       ;iterate operand 2
3b43 : 290f                     and #$f         ;lower nibble mask
3b45 : d00c                     bne tdad4       ;skip decimal adjust
3b47 : c657                     dec ad1         ;decimal adjust (?0-6)
3b49 : c657                     dec ad1
3b4b : c657                     dec ad1
3b4d : c657                     dec ad1
3b4f : c657                     dec ad1
3b51 : c657                     dec ad1
3b53 : c657             tdad4   dec ad1         ;operand 1 -1
3b55 : 4c153b                   jmp tdad        ;iterate op1
                        
3b58 : a999             tdad5   lda #$99        ;precharge op1 max
3b5a : 8557                     sta ad1
3b5c : a558                     lda ad2         ;decimal adjust operand 2
3b5e : f030                     beq tdad7       ;end of iteration
3b60 : 290f                     and #$f         ;lower nibble mask
3b62 : d018                     bne tdad6       ;skip decimal adjust
3b64 : c658                     dec ad2         ;decimal adjust (?0-6)
3b66 : c658                     dec ad2
3b68 : c658                     dec ad2
3b6a : c658                     dec ad2
3b6c : c658                     dec ad2
3b6e : c658                     dec ad2
3b70 : e65c                     inc sb2         ;complemented decimal adjust for subtract (?9+6)
3b72 : e65c                     inc sb2
3b74 : e65c                     inc sb2
3b76 : e65c                     inc sb2
3b78 : e65c                     inc sb2
3b7a : e65c                     inc sb2
3b7c : c658             tdad6   dec ad2         ;operand 2 -1
3b7e : e65c                     inc sb2         ;complemeted operand for subtract
3b80 : a55c                     lda sb2
3b82 : 8d5902                   sta sba2        ;copy as non zp operand
3b85 : a558                     lda ad2
3b87 : 8d5802                   sta ada2        ;copy as non zp operand
3b8a : 8559                     sta adrl        ;new result since op1+carry=00+carry +op2=op2
3b8c : e65a                     inc adrh        ;result carry
3b8e : d085                     bne tdad        ;iterate op2
3b90 : d8               tdad7   cld
                        
                         endif
                        
                        ; S U C C E S S ************************************************
                        ; -------------
3b91 : 4c913b                   jmp *           ;if you get here everything went well
                        ; -------------
                        ; S U C C E S S ************************************************
                        
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
3b94 :                  chkdad
                        ; decimal ADC / SBC zp
3b94 : 08                       php             ;save carry for subtract
3b95 : a557                     lda ad1
3b97 : 6558                     adc ad2         ;perform add
3b99 : 08                       php
3b9a : c559                     cmp adrl        ;check result
3b9c : d0fe                     bne *           ;bad result
3b9e : 68                       pla             ;check flags
3b9f : 2901                     and #1          ;mask carry
3ba1 : c55a                     cmp adrh
3ba3 : d0fe                     bne *           ;bad carry
3ba5 : 28                       plp
3ba6 : 08                       php             ;save carry for next add
3ba7 : a557                     lda ad1
3ba9 : e55c                     sbc sb2         ;perform subtract
3bab : 08                       php
3bac : c559                     cmp adrl        ;check result
3bae : d0fe                     bne *           ;bad result
3bb0 : 68                       pla             ;check flags
3bb1 : 2901                     and #1          ;mask carry
3bb3 : c55a                     cmp adrh
3bb5 : d0fe                     bne *           ;bad flags
3bb7 : 28                       plp
                        ; decimal ADC / SBC abs
3bb8 : 08                       php             ;save carry for subtract
3bb9 : a557                     lda ad1
3bbb : 6d5802                   adc ada2        ;perform add
3bbe : 08                       php
3bbf : c559                     cmp adrl        ;check result
3bc1 : d0fe                     bne *           ;bad result
3bc3 : 68                       pla             ;check flags
3bc4 : 2901                     and #1          ;mask carry
3bc6 : c55a                     cmp adrh
3bc8 : d0fe                     bne *           ;bad carry
3bca : 28                       plp
3bcb : 08                       php             ;save carry for next add
3bcc : a557                     lda ad1
3bce : ed5902                   sbc sba2        ;perform subtract
3bd1 : 08                       php
3bd2 : c559                     cmp adrl        ;check result
3bd4 : d0fe                     bne *           ;bad result
3bd6 : 68                       pla             ;check flags
3bd7 : 2901                     and #1          ;mask carry
3bd9 : c55a                     cmp adrh
3bdb : d0fe                     bne *           ;bad carry
3bdd : 28                       plp
                        ; decimal ADC / SBC #
3bde : 08                       php             ;save carry for subtract
3bdf : a558                     lda ad2
3be1 : 8de73b                   sta chkdadi     ;self modify immediate
3be4 : a557                     lda ad1
3be7 =                  chkdadi = * + 1         ;operand of the immediate ADC
3be6 : 6900                     adc #0          ;perform add
3be8 : 08                       php
3be9 : c559                     cmp adrl        ;check result
3beb : d0fe                     bne *           ;bad result
3bed : 68                       pla             ;check flags
3bee : 2901                     and #1          ;mask carry
3bf0 : c55a                     cmp adrh
3bf2 : d0fe                     bne *           ;bad carry
3bf4 : 28                       plp
3bf5 : 08                       php             ;save carry for next add
3bf6 : a55c                     lda sb2
3bf8 : 8dfe3b                   sta chkdsbi     ;self modify immediate
3bfb : a557                     lda ad1
3bfe =                  chkdsbi = * + 1         ;operand of the immediate SBC
3bfd : e900                     sbc #0          ;perform subtract
3bff : 08                       php
3c00 : c559                     cmp adrl        ;check result
3c02 : d0fe                     bne *           ;bad result
3c04 : 68                       pla             ;check flags
3c05 : 2901                     and #1          ;mask carry
3c07 : c55a                     cmp adrh
3c09 : d0fe                     bne *           ;bad carry
3c0b : 28                       plp
                        ; decimal ADC / SBC zp,x
3c0c : 08                       php             ;save carry for subtract
3c0d : a557                     lda ad1
3c0f : 7500                     adc 0,x         ;perform add
3c11 : 08                       php
3c12 : c559                     cmp adrl        ;check result
3c14 : d0fe                     bne *           ;bad result
3c16 : 68                       pla             ;check flags
3c17 : 2901                     and #1          ;mask carry
3c19 : c55a                     cmp adrh
3c1b : d0fe                     bne *           ;bad carry
3c1d : 28                       plp
3c1e : 08                       php             ;save carry for next add
3c1f : a557                     lda ad1
3c21 : f504                     sbc sb2-ad2,x   ;perform subtract
3c23 : 08                       php
3c24 : c559                     cmp adrl        ;check result
3c26 : d0fe                     bne *           ;bad result
3c28 : 68                       pla             ;check flags
3c29 : 2901                     and #1          ;mask carry
3c2b : c55a                     cmp adrh
3c2d : d0fe                     bne *           ;bad carry
3c2f : 28                       plp
                        ; decimal ADC / SBC abs,x
3c30 : 08                       php             ;save carry for subtract
3c31 : a557                     lda ad1
3c33 : 7d0002                   adc ada2-ad2,x  ;perform add
3c36 : 08                       php
3c37 : c559                     cmp adrl        ;check result
3c39 : d0fe                     bne *           ;bad result
3c3b : 68                       pla             ;check flags
3c3c : 2901                     and #1          ;mask carry
3c3e : c55a                     cmp adrh
3c40 : d0fe                     bne *           ;bad carry
3c42 : 28                       plp
3c43 : 08                       php             ;save carry for next add
3c44 : a557                     lda ad1
3c46 : fd0102                   sbc sba2-ad2,x  ;perform subtract
3c49 : 08                       php
3c4a : c559                     cmp adrl        ;check result
3c4c : d0fe                     bne *           ;bad result
3c4e : 68                       pla             ;check flags
3c4f : 2901                     and #1          ;mask carry
3c51 : c55a                     cmp adrh
3c53 : d0fe                     bne *           ;bad carry
3c55 : 28                       plp
                        ; decimal ADC / SBC abs,y
3c56 : 08                       php             ;save carry for subtract
3c57 : a557                     lda ad1
3c59 : 795901                   adc ada2-$ff,y  ;perform add
3c5c : 08                       php
3c5d : c559                     cmp adrl        ;check result
3c5f : d0fe                     bne *           ;bad result
3c61 : 68                       pla             ;check flags
3c62 : 2901                     and #1          ;mask carry
3c64 : c55a                     cmp adrh
3c66 : d0fe                     bne *           ;bad carry
3c68 : 28                       plp
3c69 : 08                       php             ;save carry for next add
3c6a : a557                     lda ad1
3c6c : f95a01                   sbc sba2-$ff,y  ;perform subtract
3c6f : 08                       php
3c70 : c559                     cmp adrl        ;check result
3c72 : d0fe                     bne *           ;bad result
3c74 : 68                       pla             ;check flags
3c75 : 2901                     and #1          ;mask carry
3c77 : c55a                     cmp adrh
3c79 : d0fe                     bne *           ;bad carry
3c7b : 28                       plp
                        ; decimal ADC / SBC (zp,x)
3c7c : 08                       php             ;save carry for subtract
3c7d : a557                     lda ad1
3c7f : 61f6                     adc (lo adi2-ad2,x) ;perform add
3c81 : 08                       php
3c82 : c559                     cmp adrl        ;check result
3c84 : d0fe                     bne *           ;bad result
3c86 : 68                       pla             ;check flags
3c87 : 2901                     and #1          ;mask carry
3c89 : c55a                     cmp adrh
3c8b : d0fe                     bne *           ;bad carry
3c8d : 28                       plp
3c8e : 08                       php             ;save carry for next add
3c8f : a557                     lda ad1
3c91 : e1f8                     sbc (lo sbi2-ad2,x) ;perform subtract
3c93 : 08                       php
3c94 : c559                     cmp adrl        ;check result
3c96 : d0fe                     bne *           ;bad result
3c98 : 68                       pla             ;check flags
3c99 : 2901                     and #1          ;mask carry
3c9b : c55a                     cmp adrh
3c9d : d0fe                     bne *           ;bad carry
3c9f : 28                       plp
                        ; decimal ADC / SBC (abs),y
3ca0 : 08                       php             ;save carry for subtract
3ca1 : a557                     lda ad1
3ca3 : 7152                     adc (adiy2),y   ;perform add
3ca5 : 08                       php
3ca6 : c559                     cmp adrl        ;check result
3ca8 : d0fe                     bne *           ;bad result
3caa : 68                       pla             ;check flags
3cab : 2901                     and #1          ;mask carry
3cad : c55a                     cmp adrh
3caf : d0fe                     bne *           ;bad carry
3cb1 : 28                       plp
3cb2 : 08                       php             ;save carry for next add
3cb3 : a557                     lda ad1
3cb5 : f154                     sbc (sbiy2),y   ;perform subtract
3cb7 : 08                       php
3cb8 : c559                     cmp adrl        ;check result
3cba : d0fe                     bne *           ;bad result
3cbc : 68                       pla             ;check flags
3cbd : 2901                     and #1          ;mask carry
3cbf : c55a                     cmp adrh
3cc1 : d0fe                     bne *           ;bad carry
3cc3 : 28                       plp
3cc4 : 60                       rts
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3cc5 : a55b             chkadd  lda adrf        ;add V-flag if overflow
3cc7 : 2983                     and #$83        ;keep N-----ZC / clear V
3cc9 : 48                       pha
3cca : a557                     lda ad1         ;test sign unequal between operands
3ccc : 4558                     eor ad2
3cce : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
3cd0 : a557                     lda ad1         ;test sign equal between operands and result
3cd2 : 4559                     eor adrl
3cd4 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
3cd6 : 68                       pla
3cd7 : 0940                     ora #$40        ;set V
3cd9 : 48                       pha
3cda : 68               ckad1   pla
3cdb : 855b                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
3cdd : 08                       php             ;save carry for subtract
3cde : a557                     lda ad1
3ce0 : 6558                     adc ad2         ;perform add
3ce2 : 08                       php
3ce3 : c559                     cmp adrl        ;check result
3ce5 : d0fe                     bne *           ;bad result
3ce7 : 68                       pla             ;check flags
3ce8 : 29c3                     and #$c3        ;mask NV----ZC
3cea : c55b                     cmp adrf
3cec : d0fe                     bne *           ;bad flags
3cee : 28                       plp
3cef : 08                       php             ;save carry for next add
3cf0 : a557                     lda ad1
3cf2 : e55c                     sbc sb2         ;perform subtract
3cf4 : 08                       php
3cf5 : c559                     cmp adrl        ;check result
3cf7 : d0fe                     bne *           ;bad result
3cf9 : 68                       pla             ;check flags
3cfa : 29c3                     and #$c3        ;mask NV----ZC
3cfc : c55b                     cmp adrf
3cfe : d0fe                     bne *           ;bad flags
3d00 : 28                       plp
                        ; binary ADC / SBC abs
3d01 : 08                       php             ;save carry for subtract
3d02 : a557                     lda ad1
3d04 : 6d5802                   adc ada2        ;perform add
3d07 : 08                       php
3d08 : c559                     cmp adrl        ;check result
3d0a : d0fe                     bne *           ;bad result
3d0c : 68                       pla             ;check flags
3d0d : 29c3                     and #$c3        ;mask NV----ZC
3d0f : c55b                     cmp adrf
3d11 : d0fe                     bne *           ;bad flags
3d13 : 28                       plp
3d14 : 08                       php             ;save carry for next add
3d15 : a557                     lda ad1
3d17 : ed5902                   sbc sba2        ;perform subtract
3d1a : 08                       php
3d1b : c559                     cmp adrl        ;check result
3d1d : d0fe                     bne *           ;bad result
3d1f : 68                       pla             ;check flags
3d20 : 29c3                     and #$c3        ;mask NV----ZC
3d22 : c55b                     cmp adrf
3d24 : d0fe                     bne *           ;bad flags
3d26 : 28                       plp
                        ; binary ADC / SBC #
3d27 : 08                       php             ;save carry for subtract
3d28 : a558                     lda ad2
3d2a : 8d303d                   sta chkadi      ;self modify immediate
3d2d : a557                     lda ad1
3d30 =                  chkadi  = * + 1         ;operand of the immediate ADC
3d2f : 6900                     adc #0          ;perform add
3d31 : 08                       php
3d32 : c559                     cmp adrl        ;check result
3d34 : d0fe                     bne *           ;bad result
3d36 : 68                       pla             ;check flags
3d37 : 29c3                     and #$c3        ;mask NV----ZC
3d39 : c55b                     cmp adrf
3d3b : d0fe                     bne *           ;bad flags
3d3d : 28                       plp
3d3e : 08                       php             ;save carry for next add
3d3f : a55c                     lda sb2
3d41 : 8d473d                   sta chksbi      ;self modify immediate
3d44 : a557                     lda ad1
3d47 =                  chksbi  = * + 1         ;operand of the immediate SBC
3d46 : e900                     sbc #0          ;perform subtract
3d48 : 08                       php
3d49 : c559                     cmp adrl        ;check result
3d4b : d0fe                     bne *           ;bad result
3d4d : 68                       pla             ;check flags
3d4e : 29c3                     and #$c3        ;mask NV----ZC
3d50 : c55b                     cmp adrf
3d52 : d0fe                     bne *           ;bad flags
3d54 : 28                       plp
                        ; binary ADC / SBC zp,x
3d55 : 08                       php             ;save carry for subtract
3d56 : a557                     lda ad1
3d58 : 7500                     adc 0,x         ;perform add
3d5a : 08                       php
3d5b : c559                     cmp adrl        ;check result
3d5d : d0fe                     bne *           ;bad result
3d5f : 68                       pla             ;check flags
3d60 : 29c3                     and #$c3        ;mask NV----ZC
3d62 : c55b                     cmp adrf
3d64 : d0fe                     bne *           ;bad flags
3d66 : 28                       plp
3d67 : 08                       php             ;save carry for next add
3d68 : a557                     lda ad1
3d6a : f504                     sbc sb2-ad2,x   ;perform subtract
3d6c : 08                       php
3d6d : c559                     cmp adrl        ;check result
3d6f : d0fe                     bne *           ;bad result
3d71 : 68                       pla             ;check flags
3d72 : 29c3                     and #$c3        ;mask NV----ZC
3d74 : c55b                     cmp adrf
3d76 : d0fe                     bne *           ;bad flags
3d78 : 28                       plp
                        ; binary ADC / SBC abs,x
3d79 : 08                       php             ;save carry for subtract
3d7a : a557                     lda ad1
3d7c : 7d0002                   adc ada2-ad2,x  ;perform add
3d7f : 08                       php
3d80 : c559                     cmp adrl        ;check result
3d82 : d0fe                     bne *           ;bad result
3d84 : 68                       pla             ;check flags
3d85 : 29c3                     and #$c3        ;mask NV----ZC
3d87 : c55b                     cmp adrf
3d89 : d0fe                     bne *           ;bad flags
3d8b : 28                       plp
3d8c : 08                       php             ;save carry for next add
3d8d : a557                     lda ad1
3d8f : fd0102                   sbc sba2-ad2,x  ;perform subtract
3d92 : 08                       php
3d93 : c559                     cmp adrl        ;check result
3d95 : d0fe                     bne *           ;bad result
3d97 : 68                       pla             ;check flags
3d98 : 29c3                     and #$c3        ;mask NV----ZC
3d9a : c55b                     cmp adrf
3d9c : d0fe                     bne *           ;bad flags
3d9e : 28                       plp
                        ; binary ADC / SBC abs,y
3d9f : 08                       php             ;save carry for subtract
3da0 : a557                     lda ad1
3da2 : 795901                   adc ada2-$ff,y  ;perform add
3da5 : 08                       php
3da6 : c559                     cmp adrl        ;check result
3da8 : d0fe                     bne *           ;bad result
3daa : 68                       pla             ;check flags
3dab : 29c3                     and #$c3        ;mask NV----ZC
3dad : c55b                     cmp adrf
3daf : d0fe                     bne *           ;bad flags
3db1 : 28                       plp
3db2 : 08                       php             ;save carry for next add
3db3 : a557                     lda ad1
3db5 : f95a01                   sbc sba2-$ff,y  ;perform subtract
3db8 : 08                       php
3db9 : c559                     cmp adrl        ;check result
3dbb : d0fe                     bne *           ;bad result
3dbd : 68                       pla             ;check flags
3dbe : 29c3                     and #$c3        ;mask NV----ZC
3dc0 : c55b                     cmp adrf
3dc2 : d0fe                     bne *           ;bad flags
3dc4 : 28                       plp
                        ; binary ADC / SBC (zp,x)
3dc5 : 08                       php             ;save carry for subtract
3dc6 : a557                     lda ad1
3dc8 : 61f6                     adc (lo adi2-ad2,x) ;perform add
3dca : 08                       php
3dcb : c559                     cmp adrl        ;check result
3dcd : d0fe                     bne *           ;bad result
3dcf : 68                       pla             ;check flags
3dd0 : 29c3                     and #$c3        ;mask NV----ZC
3dd2 : c55b                     cmp adrf
3dd4 : d0fe                     bne *           ;bad flags
3dd6 : 28                       plp
3dd7 : 08                       php             ;save carry for next add
3dd8 : a557                     lda ad1
3dda : e1f8                     sbc (lo sbi2-ad2,x) ;perform subtract
3ddc : 08                       php
3ddd : c559                     cmp adrl        ;check result
3ddf : d0fe                     bne *           ;bad result
3de1 : 68                       pla             ;check flags
3de2 : 29c3                     and #$c3        ;mask NV----ZC
3de4 : c55b                     cmp adrf
3de6 : d0fe                     bne *           ;bad flags
3de8 : 28                       plp
                        ; binary ADC / SBC (abs),y
3de9 : 08                       php             ;save carry for subtract
3dea : a557                     lda ad1
3dec : 7152                     adc (adiy2),y   ;perform add
3dee : 08                       php
3def : c559                     cmp adrl        ;check result
3df1 : d0fe                     bne *           ;bad result
3df3 : 68                       pla             ;check flags
3df4 : 29c3                     and #$c3        ;mask NV----ZC
3df6 : c55b                     cmp adrf
3df8 : d0fe                     bne *           ;bad flags
3dfa : 28                       plp
3dfb : 08                       php             ;save carry for next add
3dfc : a557                     lda ad1
3dfe : f154                     sbc (sbiy2),y   ;perform subtract
3e00 : 08                       php
3e01 : c559                     cmp adrl        ;check result
3e03 : d0fe                     bne *           ;bad result
3e05 : 68                       pla             ;check flags
3e06 : 29c3                     and #$c3        ;mask NV----ZC
3e08 : c55b                     cmp adrf
3e0a : d0fe                     bne *           ;bad flags
3e0c : 28                       plp
3e0d : 60                       rts
                        
                        ; target for the jump absolute test
3e0e : 88                       dey
3e0f : 88                       dey
3e10 :                  test_far
3e10 : 08                       php             ;either SP or Y count will fail, if we do not hit
3e11 : 88                       dey
3e12 : 88                       dey
3e13 : 88                       dey
3e14 : 28                       plp
3e15 : b0fe                     bcs *           ;flags loaded?
3e17 : 70fe                     bvs *
3e19 : 30fe                     bmi *
3e1b : f0fe                     beq *
3e1d : c946                     cmp #'F'        ;registers loaded?
3e1f : d0fe                     bne *
3e21 : e041                     cpx #'A'
3e23 : d0fe                     bne *
3e25 : c04f                     cpy #('R'-3)
3e27 : d0fe                     bne *
3e29 : 48                       pha             ;save a,x
3e2a : 8a                       txa
3e2b : 48                       pha
3e2c : ba                       tsx
3e2d : e0fd                     cpx #$fd        ;check SP
3e2f : d0fe                     bne *
3e31 : 68                       pla             ;restore x
3e32 : aa                       tax
                                set_stat $ff
                        
3e37 : 68                       pla             ;restore a
3e38 : e8                       inx             ;return registers with modifications
3e39 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3e3b : 4c8312                   jmp far_ret
                        
                        ; target for the jump indirect test
3e3e : 473e             ptr_tst_ind dw test_ind
3e40 : cc12             ptr_ind_ret dw ind_ret
3e42 : 4c423e                   jmp *           ;runover protection
3e45 : 88                       dey
3e46 : 88                       dey
3e47 :                  test_ind
3e47 : 08                       php             ;either SP or Y count will fail, if we do not hit
3e48 : 88                       dey
3e49 : 88                       dey
3e4a : 88                       dey
3e4b : 28                       plp
3e4c : b0fe                     bcs *           ;flags loaded?
3e4e : 70fe                     bvs *
3e50 : 30fe                     bmi *
3e52 : f0fe                     beq *
3e54 : c949                     cmp #'I'        ;registers loaded?
3e56 : d0fe                     bne *
3e58 : e04e                     cpx #'N'
3e5a : d0fe                     bne *
3e5c : c041                     cpy #('D'-3)
3e5e : d0fe                     bne *
3e60 : 48                       pha             ;save a,x
3e61 : 8a                       txa
3e62 : 48                       pha
3e63 : ba                       tsx
3e64 : e0fd                     cpx #$fd        ;check SP
3e66 : d0fe                     bne *
3e68 : 68                       pla             ;restore x
3e69 : aa                       tax
                                set_stat $ff
                        
3e6e : 68                       pla             ;restore a
3e6f : e8                       inx             ;return registers with modifications
3e70 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3e72 : 6c403e                   jmp (ptr_ind_ret)
3e75 : 4c753e                   jmp *           ;runover protection
                        
                        ; target for the jump subroutine test
3e78 : 88                       dey
3e79 : 88                       dey
3e7a :                  test_jsr
3e7a : 08                       php             ;either SP or Y count will fail, if we do not hit
3e7b : 88                       dey
3e7c : 88                       dey
3e7d : 88                       dey
3e7e : 28                       plp
3e7f : b0fe                     bcs *           ;flags loaded?
3e81 : 70fe                     bvs *
3e83 : 30fe                     bmi *
3e85 : f0fe                     beq *
3e87 : c94a                     cmp #'J'        ;registers loaded?
3e89 : d0fe                     bne *
3e8b : e053                     cpx #'S'
3e8d : d0fe                     bne *
3e8f : c04f                     cpy #('R'-3)
3e91 : d0fe                     bne *
3e93 : 48                       pha             ;save a,x
3e94 : 8a                       txa
3e95 : 48                       pha
3e96 : ba                       tsx             ;sp -4? (return addr,a,x)
3e97 : e0fb                     cpx #$fb
3e99 : d0fe                     bne *
3e9b : adff01                   lda $1ff        ;propper return on stack
3e9e : c912                     cmp #hi(jsr_ret)
3ea0 : d0fe                     bne *
3ea2 : adfe01                   lda $1fe
3ea5 : c9f6                     cmp #lo(jsr_ret)
3ea7 : d0fe                     bne *
                                set_stat $ff
                        
3ead : 68                       pla             ;pull x,a
3eae : aa                       tax
3eaf : 68                       pla
3eb0 : e8                       inx             ;return registers with modifications
3eb1 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3eb3 : 60                       rts
3eb4 : 4cb43e                   jmp *           ;runover protection
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
3eb7 :                  nmi_trap
3eb7 : 4cb73e                   jmp *           ;check stack for conditions at NMI
3eba :                  res_trap
3eba : 4cba3e                   jmp *           ;unexpected RESET
                        
3ebd : 88                       dey
3ebe : 88                       dey
3ebf :                  irq_trap                ;BRK test or unextpected BRK or IRQ
3ebf : 08                       php             ;either SP or Y count will fail, if we do not hit
3ec0 : 88                       dey
3ec1 : 88                       dey
3ec2 : 88                       dey
                                ;next 4 traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
3ec3 : c942                     cmp #'B'        ;registers loaded?
3ec5 : d0fe                     bne *
3ec7 : e052                     cpx #'R'
3ec9 : d0fe                     bne *
3ecb : c048                     cpy #('K'-3)
3ecd : d0fe                     bne *
3ecf : 855d                     sta irq_a       ;save registers during break test
3ed1 : 865e                     stx irq_x
3ed3 : ba                       tsx             ;test break on stack
3ed4 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1
                        
3ed9 : d0fe                     bne *           ;trap - no break flag on stack
3edb : 68                       pla
3edc : c934                     cmp #$34        ;should have added interrupt disable
3ede : d0fe                     bne *
3ee0 : ba                       tsx
3ee1 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
3ee3 : d0fe                     bne *
3ee5 : adff01                   lda $1ff        ;propper return on stack
3ee8 : c913                     cmp #hi(brk_ret)
3eea : d0fe                     bne *
3eec : adfe01                   lda $1fe
3eef : c921                     cmp #lo(brk_ret)
3ef1 : d0fe                     bne *
                                set_stat $ff
                        
3ef7 : a65e                     ldx irq_x
3ef9 : e8                       inx             ;return registers with modifications
3efa : a55d                     lda irq_a
3efc : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1 but original flags should be restored
3efe : 40                       rti
3eff : 4cff3e                   jmp *           ;runover protection
                        
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        zpt_    ds  5               ;store/modify test area
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract operand generation and result/flag prediction
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        ;adfc    ds  1               ;carry flag before op
                        ;ad1     ds  1               ;operand 1 - accumulator
                        ;ad2     ds  1               ;operand 2 - memory / immediate
                        ;adrl    ds  1               ;expected result bits 0-7
                        ;adrh    ds  1               ;expected result bit 8 (carry)
                        ;adrf    ds  1               ;expected flags NV0000ZC (not valid in decimal mode)
                        ;sb2     ds  1               ;operand 2 complemented for subtract
                        ;break test interrupt save
                        ;irq_a   ds  1               ;a register
                        ;irq_x   ds  1               ;x register
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif
                        data_init
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz      ;expected flags for load
                        ;shifts
                        rASL_                       ;expected result ASL & ROL -carry
                        rROL_   db  $86,$04,$82,0   ; "
                        rROLc_  db  $87,$05,$83,1   ;expected result ROL +carry
                        rLSR_                       ;expected result LSR & ROR -carry
                        rROR_   db  $61,$41,$20,0   ; "
                        rRORc_  db  $e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                       ;expected flags for shifts
                        fROL_   db  fnc,fc,fn,fz    ;no carry in
                        fROLc_  db  fnc,fc,fn,0     ;carry in
                        fLSR_
                        fROR_   db  fc,0,fc,fz      ;no carry in
                        fRORc_  db  fnc,fn,fnc,fn   ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1 ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0    ;expected flags for INC/DEC
                        abst_   ds  5               ;store/modify test area
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80   ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80 ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0     ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        ;add/subtract operand copy
                        ;ada2    ds  1               ;operand 2
                        ;sba2    ds  1               ;operand 2 complemented for subtract
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif
                            endif                   ;end of RAM init data
                        
                            if ROM_vectors = 1
fffa =                          org $fffa       ;vectors
fffa : b73e                     dw  nmi_trap
fffc : ba3e                     dw  res_trap
fffe : bf3e                     dw  irq_trap
                            endif
                        
                        
No errors in pass 2.
Wrote binary from address $0000 through $ffff.
Total size 65536 bytes.
